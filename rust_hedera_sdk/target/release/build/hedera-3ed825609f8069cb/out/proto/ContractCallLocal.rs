// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ContractLoginfo {
    // message fields
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    pub bloom: ::std::vec::Vec<u8>,
    pub topic: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractLoginfo {
    pub fn new() -> ContractLoginfo {
        ::std::default::Default::default()
    }

    // .proto.ContractID contractID = 1;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }

    // bytes bloom = 2;

    pub fn clear_bloom(&mut self) {
        self.bloom.clear();
    }

    // Param is passed by value, moved
    pub fn set_bloom(&mut self, v: ::std::vec::Vec<u8>) {
        self.bloom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bloom(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bloom
    }

    // Take field
    pub fn take_bloom(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bloom, ::std::vec::Vec::new())
    }

    pub fn get_bloom(&self) -> &[u8] {
        &self.bloom
    }

    // repeated bytes topic = 3;

    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topic(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.topic, ::protobuf::RepeatedField::new())
    }

    pub fn get_topic(&self) -> &[::std::vec::Vec<u8>] {
        &self.topic
    }

    // bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for ContractLoginfo {
    fn is_initialized(&self) -> bool {
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bloom)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.topic)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.bloom.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.bloom);
        }
        for value in &self.topic {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.bloom.is_empty() {
            os.write_bytes(2, &self.bloom)?;
        }
        for v in &self.topic {
            os.write_bytes(3, &v)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractLoginfo {
        ContractLoginfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractLoginfo| { &m.contractID },
                    |m: &mut ContractLoginfo| { &mut m.contractID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bloom",
                    |m: &ContractLoginfo| { &m.bloom },
                    |m: &mut ContractLoginfo| { &mut m.bloom },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "topic",
                    |m: &ContractLoginfo| { &m.topic },
                    |m: &mut ContractLoginfo| { &mut m.topic },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &ContractLoginfo| { &m.data },
                    |m: &mut ContractLoginfo| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractLoginfo>(
                    "ContractLoginfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractLoginfo {
        static mut instance: ::protobuf::lazy::Lazy<ContractLoginfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractLoginfo,
        };
        unsafe {
            instance.get(ContractLoginfo::new)
        }
    }
}

impl ::protobuf::Clear for ContractLoginfo {
    fn clear(&mut self) {
        self.clear_contractID();
        self.clear_bloom();
        self.clear_topic();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractLoginfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractLoginfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractFunctionResult {
    // message fields
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    pub contractCallResult: ::std::vec::Vec<u8>,
    pub errorMessage: ::std::string::String,
    pub bloom: ::std::vec::Vec<u8>,
    pub gasUsed: u64,
    pub logInfo: ::protobuf::RepeatedField<ContractLoginfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractFunctionResult {
    pub fn new() -> ContractFunctionResult {
        ::std::default::Default::default()
    }

    // .proto.ContractID contractID = 1;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }

    // bytes contractCallResult = 2;

    pub fn clear_contractCallResult(&mut self) {
        self.contractCallResult.clear();
    }

    // Param is passed by value, moved
    pub fn set_contractCallResult(&mut self, v: ::std::vec::Vec<u8>) {
        self.contractCallResult = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractCallResult(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.contractCallResult
    }

    // Take field
    pub fn take_contractCallResult(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.contractCallResult, ::std::vec::Vec::new())
    }

    pub fn get_contractCallResult(&self) -> &[u8] {
        &self.contractCallResult
    }

    // string errorMessage = 3;

    pub fn clear_errorMessage(&mut self) {
        self.errorMessage.clear();
    }

    // Param is passed by value, moved
    pub fn set_errorMessage(&mut self, v: ::std::string::String) {
        self.errorMessage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errorMessage(&mut self) -> &mut ::std::string::String {
        &mut self.errorMessage
    }

    // Take field
    pub fn take_errorMessage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errorMessage, ::std::string::String::new())
    }

    pub fn get_errorMessage(&self) -> &str {
        &self.errorMessage
    }

    // bytes bloom = 4;

    pub fn clear_bloom(&mut self) {
        self.bloom.clear();
    }

    // Param is passed by value, moved
    pub fn set_bloom(&mut self, v: ::std::vec::Vec<u8>) {
        self.bloom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bloom(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bloom
    }

    // Take field
    pub fn take_bloom(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bloom, ::std::vec::Vec::new())
    }

    pub fn get_bloom(&self) -> &[u8] {
        &self.bloom
    }

    // uint64 gasUsed = 5;

    pub fn clear_gasUsed(&mut self) {
        self.gasUsed = 0;
    }

    // Param is passed by value, moved
    pub fn set_gasUsed(&mut self, v: u64) {
        self.gasUsed = v;
    }

    pub fn get_gasUsed(&self) -> u64 {
        self.gasUsed
    }

    // repeated .proto.ContractLoginfo logInfo = 6;

    pub fn clear_logInfo(&mut self) {
        self.logInfo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logInfo(&mut self, v: ::protobuf::RepeatedField<ContractLoginfo>) {
        self.logInfo = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logInfo(&mut self) -> &mut ::protobuf::RepeatedField<ContractLoginfo> {
        &mut self.logInfo
    }

    // Take field
    pub fn take_logInfo(&mut self) -> ::protobuf::RepeatedField<ContractLoginfo> {
        ::std::mem::replace(&mut self.logInfo, ::protobuf::RepeatedField::new())
    }

    pub fn get_logInfo(&self) -> &[ContractLoginfo] {
        &self.logInfo
    }
}

impl ::protobuf::Message for ContractFunctionResult {
    fn is_initialized(&self) -> bool {
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.logInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.contractCallResult)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errorMessage)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bloom)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gasUsed = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.contractCallResult.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.contractCallResult);
        }
        if !self.errorMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.errorMessage);
        }
        if !self.bloom.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.bloom);
        }
        if self.gasUsed != 0 {
            my_size += ::protobuf::rt::value_size(5, self.gasUsed, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.logInfo {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.contractCallResult.is_empty() {
            os.write_bytes(2, &self.contractCallResult)?;
        }
        if !self.errorMessage.is_empty() {
            os.write_string(3, &self.errorMessage)?;
        }
        if !self.bloom.is_empty() {
            os.write_bytes(4, &self.bloom)?;
        }
        if self.gasUsed != 0 {
            os.write_uint64(5, self.gasUsed)?;
        }
        for v in &self.logInfo {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractFunctionResult {
        ContractFunctionResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractFunctionResult| { &m.contractID },
                    |m: &mut ContractFunctionResult| { &mut m.contractID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "contractCallResult",
                    |m: &ContractFunctionResult| { &m.contractCallResult },
                    |m: &mut ContractFunctionResult| { &mut m.contractCallResult },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errorMessage",
                    |m: &ContractFunctionResult| { &m.errorMessage },
                    |m: &mut ContractFunctionResult| { &mut m.errorMessage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bloom",
                    |m: &ContractFunctionResult| { &m.bloom },
                    |m: &mut ContractFunctionResult| { &mut m.bloom },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gasUsed",
                    |m: &ContractFunctionResult| { &m.gasUsed },
                    |m: &mut ContractFunctionResult| { &mut m.gasUsed },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContractLoginfo>>(
                    "logInfo",
                    |m: &ContractFunctionResult| { &m.logInfo },
                    |m: &mut ContractFunctionResult| { &mut m.logInfo },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractFunctionResult>(
                    "ContractFunctionResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractFunctionResult {
        static mut instance: ::protobuf::lazy::Lazy<ContractFunctionResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractFunctionResult,
        };
        unsafe {
            instance.get(ContractFunctionResult::new)
        }
    }
}

impl ::protobuf::Clear for ContractFunctionResult {
    fn clear(&mut self) {
        self.clear_contractID();
        self.clear_contractCallResult();
        self.clear_errorMessage();
        self.clear_bloom();
        self.clear_gasUsed();
        self.clear_logInfo();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractFunctionResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractFunctionResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractCallLocalQuery {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::QueryHeader::QueryHeader>,
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    pub gas: i64,
    pub functionParameters: ::std::vec::Vec<u8>,
    pub maxResultSize: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractCallLocalQuery {
    pub fn new() -> ContractCallLocalQuery {
        ::std::default::Default::default()
    }

    // .proto.QueryHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::QueryHeader::QueryHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::QueryHeader::QueryHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::QueryHeader::QueryHeader {
        self.header.take().unwrap_or_else(|| super::QueryHeader::QueryHeader::new())
    }

    pub fn get_header(&self) -> &super::QueryHeader::QueryHeader {
        self.header.as_ref().unwrap_or_else(|| super::QueryHeader::QueryHeader::default_instance())
    }

    // .proto.ContractID contractID = 2;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }

    // int64 gas = 3;

    pub fn clear_gas(&mut self) {
        self.gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas(&mut self, v: i64) {
        self.gas = v;
    }

    pub fn get_gas(&self) -> i64 {
        self.gas
    }

    // bytes functionParameters = 4;

    pub fn clear_functionParameters(&mut self) {
        self.functionParameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_functionParameters(&mut self, v: ::std::vec::Vec<u8>) {
        self.functionParameters = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_functionParameters(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.functionParameters
    }

    // Take field
    pub fn take_functionParameters(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.functionParameters, ::std::vec::Vec::new())
    }

    pub fn get_functionParameters(&self) -> &[u8] {
        &self.functionParameters
    }

    // int64 maxResultSize = 5;

    pub fn clear_maxResultSize(&mut self) {
        self.maxResultSize = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxResultSize(&mut self, v: i64) {
        self.maxResultSize = v;
    }

    pub fn get_maxResultSize(&self) -> i64 {
        self.maxResultSize
    }
}

impl ::protobuf::Message for ContractCallLocalQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gas = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.functionParameters)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.maxResultSize = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.gas != 0 {
            my_size += ::protobuf::rt::value_size(3, self.gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.functionParameters.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.functionParameters);
        }
        if self.maxResultSize != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maxResultSize, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.gas != 0 {
            os.write_int64(3, self.gas)?;
        }
        if !self.functionParameters.is_empty() {
            os.write_bytes(4, &self.functionParameters)?;
        }
        if self.maxResultSize != 0 {
            os.write_int64(5, self.maxResultSize)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractCallLocalQuery {
        ContractCallLocalQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::QueryHeader::QueryHeader>>(
                    "header",
                    |m: &ContractCallLocalQuery| { &m.header },
                    |m: &mut ContractCallLocalQuery| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractCallLocalQuery| { &m.contractID },
                    |m: &mut ContractCallLocalQuery| { &mut m.contractID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "gas",
                    |m: &ContractCallLocalQuery| { &m.gas },
                    |m: &mut ContractCallLocalQuery| { &mut m.gas },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "functionParameters",
                    |m: &ContractCallLocalQuery| { &m.functionParameters },
                    |m: &mut ContractCallLocalQuery| { &mut m.functionParameters },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "maxResultSize",
                    |m: &ContractCallLocalQuery| { &m.maxResultSize },
                    |m: &mut ContractCallLocalQuery| { &mut m.maxResultSize },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractCallLocalQuery>(
                    "ContractCallLocalQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractCallLocalQuery {
        static mut instance: ::protobuf::lazy::Lazy<ContractCallLocalQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractCallLocalQuery,
        };
        unsafe {
            instance.get(ContractCallLocalQuery::new)
        }
    }
}

impl ::protobuf::Clear for ContractCallLocalQuery {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_contractID();
        self.clear_gas();
        self.clear_functionParameters();
        self.clear_maxResultSize();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractCallLocalQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractCallLocalQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractCallLocalResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::ResponseHeader::ResponseHeader>,
    pub functionResult: ::protobuf::SingularPtrField<ContractFunctionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractCallLocalResponse {
    pub fn new() -> ContractCallLocalResponse {
        ::std::default::Default::default()
    }

    // .proto.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::ResponseHeader::ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::ResponseHeader::ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::ResponseHeader::ResponseHeader {
        self.header.take().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::new())
    }

    pub fn get_header(&self) -> &super::ResponseHeader::ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::default_instance())
    }

    // .proto.ContractFunctionResult functionResult = 2;

    pub fn clear_functionResult(&mut self) {
        self.functionResult.clear();
    }

    pub fn has_functionResult(&self) -> bool {
        self.functionResult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_functionResult(&mut self, v: ContractFunctionResult) {
        self.functionResult = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_functionResult(&mut self) -> &mut ContractFunctionResult {
        if self.functionResult.is_none() {
            self.functionResult.set_default();
        }
        self.functionResult.as_mut().unwrap()
    }

    // Take field
    pub fn take_functionResult(&mut self) -> ContractFunctionResult {
        self.functionResult.take().unwrap_or_else(|| ContractFunctionResult::new())
    }

    pub fn get_functionResult(&self) -> &ContractFunctionResult {
        self.functionResult.as_ref().unwrap_or_else(|| ContractFunctionResult::default_instance())
    }
}

impl ::protobuf::Message for ContractCallLocalResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.functionResult {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.functionResult)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.functionResult.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.functionResult.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractCallLocalResponse {
        ContractCallLocalResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ResponseHeader::ResponseHeader>>(
                    "header",
                    |m: &ContractCallLocalResponse| { &m.header },
                    |m: &mut ContractCallLocalResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContractFunctionResult>>(
                    "functionResult",
                    |m: &ContractCallLocalResponse| { &m.functionResult },
                    |m: &mut ContractCallLocalResponse| { &mut m.functionResult },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractCallLocalResponse>(
                    "ContractCallLocalResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractCallLocalResponse {
        static mut instance: ::protobuf::lazy::Lazy<ContractCallLocalResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractCallLocalResponse,
        };
        unsafe {
            instance.get(ContractCallLocalResponse::new)
        }
    }
}

impl ::protobuf::Clear for ContractCallLocalResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_functionResult();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractCallLocalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractCallLocalResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17ContractCallLocal.proto\x12\x05proto\x1a\x10BasicTypes.proto\x1a\
    \x11QueryHeader.proto\x1a\x14ResponseHeader.proto\"\x84\x01\n\x0fContrac\
    tLoginfo\x121\n\ncontractID\x18\x01\x20\x01(\x0b2\x11.proto.ContractIDR\
    \ncontractID\x12\x14\n\x05bloom\x18\x02\x20\x01(\x0cR\x05bloom\x12\x14\n\
    \x05topic\x18\x03\x20\x03(\x0cR\x05topic\x12\x12\n\x04data\x18\x04\x20\
    \x01(\x0cR\x04data\"\x81\x02\n\x16ContractFunctionResult\x121\n\ncontrac\
    tID\x18\x01\x20\x01(\x0b2\x11.proto.ContractIDR\ncontractID\x12.\n\x12co\
    ntractCallResult\x18\x02\x20\x01(\x0cR\x12contractCallResult\x12\"\n\x0c\
    errorMessage\x18\x03\x20\x01(\tR\x0cerrorMessage\x12\x14\n\x05bloom\x18\
    \x04\x20\x01(\x0cR\x05bloom\x12\x18\n\x07gasUsed\x18\x05\x20\x01(\x04R\
    \x07gasUsed\x120\n\x07logInfo\x18\x06\x20\x03(\x0b2\x16.proto.ContractLo\
    ginfoR\x07logInfo\"\xdf\x01\n\x16ContractCallLocalQuery\x12*\n\x06header\
    \x18\x01\x20\x01(\x0b2\x12.proto.QueryHeaderR\x06header\x121\n\ncontract\
    ID\x18\x02\x20\x01(\x0b2\x11.proto.ContractIDR\ncontractID\x12\x10\n\x03\
    gas\x18\x03\x20\x01(\x03R\x03gas\x12.\n\x12functionParameters\x18\x04\
    \x20\x01(\x0cR\x12functionParameters\x12$\n\rmaxResultSize\x18\x05\x20\
    \x01(\x03R\rmaxResultSize\"\x91\x01\n\x19ContractCallLocalResponse\x12-\
    \n\x06header\x18\x01\x20\x01(\x0b2\x15.proto.ResponseHeaderR\x06header\
    \x12E\n\x0efunctionResult\x18\x02\x20\x01(\x0b2\x1d.proto.ContractFuncti\
    onResultR\x0efunctionResultB&\n\"com.hederahashgraph.api.proto.javaP\x01\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
