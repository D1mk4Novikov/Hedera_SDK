// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ContractGetInfoQuery {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::QueryHeader::QueryHeader>,
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractGetInfoQuery {
    pub fn new() -> ContractGetInfoQuery {
        ::std::default::Default::default()
    }

    // .proto.QueryHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::QueryHeader::QueryHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::QueryHeader::QueryHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::QueryHeader::QueryHeader {
        self.header.take().unwrap_or_else(|| super::QueryHeader::QueryHeader::new())
    }

    pub fn get_header(&self) -> &super::QueryHeader::QueryHeader {
        self.header.as_ref().unwrap_or_else(|| super::QueryHeader::QueryHeader::default_instance())
    }

    // .proto.ContractID contractID = 2;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }
}

impl ::protobuf::Message for ContractGetInfoQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractGetInfoQuery {
        ContractGetInfoQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::QueryHeader::QueryHeader>>(
                    "header",
                    |m: &ContractGetInfoQuery| { &m.header },
                    |m: &mut ContractGetInfoQuery| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractGetInfoQuery| { &m.contractID },
                    |m: &mut ContractGetInfoQuery| { &mut m.contractID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractGetInfoQuery>(
                    "ContractGetInfoQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractGetInfoQuery {
        static mut instance: ::protobuf::lazy::Lazy<ContractGetInfoQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractGetInfoQuery,
        };
        unsafe {
            instance.get(ContractGetInfoQuery::new)
        }
    }
}

impl ::protobuf::Clear for ContractGetInfoQuery {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_contractID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractGetInfoQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractGetInfoQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractGetInfoResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::ResponseHeader::ResponseHeader>,
    pub contractInfo: ::protobuf::SingularPtrField<ContractGetInfoResponse_ContractInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractGetInfoResponse {
    pub fn new() -> ContractGetInfoResponse {
        ::std::default::Default::default()
    }

    // .proto.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::ResponseHeader::ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::ResponseHeader::ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::ResponseHeader::ResponseHeader {
        self.header.take().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::new())
    }

    pub fn get_header(&self) -> &super::ResponseHeader::ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::default_instance())
    }

    // .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;

    pub fn clear_contractInfo(&mut self) {
        self.contractInfo.clear();
    }

    pub fn has_contractInfo(&self) -> bool {
        self.contractInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractInfo(&mut self, v: ContractGetInfoResponse_ContractInfo) {
        self.contractInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractInfo(&mut self) -> &mut ContractGetInfoResponse_ContractInfo {
        if self.contractInfo.is_none() {
            self.contractInfo.set_default();
        }
        self.contractInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractInfo(&mut self) -> ContractGetInfoResponse_ContractInfo {
        self.contractInfo.take().unwrap_or_else(|| ContractGetInfoResponse_ContractInfo::new())
    }

    pub fn get_contractInfo(&self) -> &ContractGetInfoResponse_ContractInfo {
        self.contractInfo.as_ref().unwrap_or_else(|| ContractGetInfoResponse_ContractInfo::default_instance())
    }
}

impl ::protobuf::Message for ContractGetInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.contractInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.contractInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.contractInfo.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractGetInfoResponse {
        ContractGetInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ResponseHeader::ResponseHeader>>(
                    "header",
                    |m: &ContractGetInfoResponse| { &m.header },
                    |m: &mut ContractGetInfoResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContractGetInfoResponse_ContractInfo>>(
                    "contractInfo",
                    |m: &ContractGetInfoResponse| { &m.contractInfo },
                    |m: &mut ContractGetInfoResponse| { &mut m.contractInfo },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractGetInfoResponse>(
                    "ContractGetInfoResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractGetInfoResponse {
        static mut instance: ::protobuf::lazy::Lazy<ContractGetInfoResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractGetInfoResponse,
        };
        unsafe {
            instance.get(ContractGetInfoResponse::new)
        }
    }
}

impl ::protobuf::Clear for ContractGetInfoResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_contractInfo();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractGetInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractGetInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractGetInfoResponse_ContractInfo {
    // message fields
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub contractAccountID: ::std::string::String,
    pub adminKey: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    pub expirationTime: ::protobuf::SingularPtrField<super::Timestamp::Timestamp>,
    pub autoRenewPeriod: ::protobuf::SingularPtrField<super::Duration::Duration>,
    pub storage: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractGetInfoResponse_ContractInfo {
    pub fn new() -> ContractGetInfoResponse_ContractInfo {
        ::std::default::Default::default()
    }

    // .proto.ContractID contractID = 1;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }

    // .proto.AccountID accountID = 2;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // string contractAccountID = 3;

    pub fn clear_contractAccountID(&mut self) {
        self.contractAccountID.clear();
    }

    // Param is passed by value, moved
    pub fn set_contractAccountID(&mut self, v: ::std::string::String) {
        self.contractAccountID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractAccountID(&mut self) -> &mut ::std::string::String {
        &mut self.contractAccountID
    }

    // Take field
    pub fn take_contractAccountID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contractAccountID, ::std::string::String::new())
    }

    pub fn get_contractAccountID(&self) -> &str {
        &self.contractAccountID
    }

    // .proto.Key adminKey = 4;

    pub fn clear_adminKey(&mut self) {
        self.adminKey.clear();
    }

    pub fn has_adminKey(&self) -> bool {
        self.adminKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_adminKey(&mut self, v: super::BasicTypes::Key) {
        self.adminKey = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adminKey(&mut self) -> &mut super::BasicTypes::Key {
        if self.adminKey.is_none() {
            self.adminKey.set_default();
        }
        self.adminKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_adminKey(&mut self) -> super::BasicTypes::Key {
        self.adminKey.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_adminKey(&self) -> &super::BasicTypes::Key {
        self.adminKey.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }

    // .proto.Timestamp expirationTime = 5;

    pub fn clear_expirationTime(&mut self) {
        self.expirationTime.clear();
    }

    pub fn has_expirationTime(&self) -> bool {
        self.expirationTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationTime(&mut self, v: super::Timestamp::Timestamp) {
        self.expirationTime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expirationTime(&mut self) -> &mut super::Timestamp::Timestamp {
        if self.expirationTime.is_none() {
            self.expirationTime.set_default();
        }
        self.expirationTime.as_mut().unwrap()
    }

    // Take field
    pub fn take_expirationTime(&mut self) -> super::Timestamp::Timestamp {
        self.expirationTime.take().unwrap_or_else(|| super::Timestamp::Timestamp::new())
    }

    pub fn get_expirationTime(&self) -> &super::Timestamp::Timestamp {
        self.expirationTime.as_ref().unwrap_or_else(|| super::Timestamp::Timestamp::default_instance())
    }

    // .proto.Duration autoRenewPeriod = 6;

    pub fn clear_autoRenewPeriod(&mut self) {
        self.autoRenewPeriod.clear();
    }

    pub fn has_autoRenewPeriod(&self) -> bool {
        self.autoRenewPeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autoRenewPeriod(&mut self, v: super::Duration::Duration) {
        self.autoRenewPeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_autoRenewPeriod(&mut self) -> &mut super::Duration::Duration {
        if self.autoRenewPeriod.is_none() {
            self.autoRenewPeriod.set_default();
        }
        self.autoRenewPeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_autoRenewPeriod(&mut self) -> super::Duration::Duration {
        self.autoRenewPeriod.take().unwrap_or_else(|| super::Duration::Duration::new())
    }

    pub fn get_autoRenewPeriod(&self) -> &super::Duration::Duration {
        self.autoRenewPeriod.as_ref().unwrap_or_else(|| super::Duration::Duration::default_instance())
    }

    // int64 storage = 7;

    pub fn clear_storage(&mut self) {
        self.storage = 0;
    }

    // Param is passed by value, moved
    pub fn set_storage(&mut self, v: i64) {
        self.storage = v;
    }

    pub fn get_storage(&self) -> i64 {
        self.storage
    }
}

impl ::protobuf::Message for ContractGetInfoResponse_ContractInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.adminKey {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expirationTime {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.autoRenewPeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contractAccountID)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.adminKey)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expirationTime)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.autoRenewPeriod)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.storage = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.contractAccountID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contractAccountID);
        }
        if let Some(ref v) = self.adminKey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.storage != 0 {
            my_size += ::protobuf::rt::value_size(7, self.storage, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.contractAccountID.is_empty() {
            os.write_string(3, &self.contractAccountID)?;
        }
        if let Some(ref v) = self.adminKey.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.storage != 0 {
            os.write_int64(7, self.storage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractGetInfoResponse_ContractInfo {
        ContractGetInfoResponse_ContractInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.contractID },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.contractID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.accountID },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.accountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contractAccountID",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.contractAccountID },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.contractAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "adminKey",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.adminKey },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.adminKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Timestamp::Timestamp>>(
                    "expirationTime",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.expirationTime },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.expirationTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Duration::Duration>>(
                    "autoRenewPeriod",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.autoRenewPeriod },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.autoRenewPeriod },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "storage",
                    |m: &ContractGetInfoResponse_ContractInfo| { &m.storage },
                    |m: &mut ContractGetInfoResponse_ContractInfo| { &mut m.storage },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractGetInfoResponse_ContractInfo>(
                    "ContractGetInfoResponse_ContractInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractGetInfoResponse_ContractInfo {
        static mut instance: ::protobuf::lazy::Lazy<ContractGetInfoResponse_ContractInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractGetInfoResponse_ContractInfo,
        };
        unsafe {
            instance.get(ContractGetInfoResponse_ContractInfo::new)
        }
    }
}

impl ::protobuf::Clear for ContractGetInfoResponse_ContractInfo {
    fn clear(&mut self) {
        self.clear_contractID();
        self.clear_accountID();
        self.clear_contractAccountID();
        self.clear_adminKey();
        self.clear_expirationTime();
        self.clear_autoRenewPeriod();
        self.clear_storage();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractGetInfoResponse_ContractInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractGetInfoResponse_ContractInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15ContractGetInfo.proto\x12\x05proto\x1a\x0fTimestamp.proto\x1a\x0eD\
    uration.proto\x1a\x10BasicTypes.proto\x1a\x11QueryHeader.proto\x1a\x14Re\
    sponseHeader.proto\"u\n\x14ContractGetInfoQuery\x12*\n\x06header\x18\x01\
    \x20\x01(\x0b2\x12.proto.QueryHeaderR\x06header\x121\n\ncontractID\x18\
    \x02\x20\x01(\x0b2\x11.proto.ContractIDR\ncontractID\"\xf2\x03\n\x17Cont\
    ractGetInfoResponse\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.proto.Res\
    ponseHeaderR\x06header\x12O\n\x0ccontractInfo\x18\x02\x20\x01(\x0b2+.pro\
    to.ContractGetInfoResponse.ContractInfoR\x0ccontractInfo\x1a\xd6\x02\n\
    \x0cContractInfo\x121\n\ncontractID\x18\x01\x20\x01(\x0b2\x11.proto.Cont\
    ractIDR\ncontractID\x12.\n\taccountID\x18\x02\x20\x01(\x0b2\x10.proto.Ac\
    countIDR\taccountID\x12,\n\x11contractAccountID\x18\x03\x20\x01(\tR\x11c\
    ontractAccountID\x12&\n\x08adminKey\x18\x04\x20\x01(\x0b2\n.proto.KeyR\
    \x08adminKey\x128\n\x0eexpirationTime\x18\x05\x20\x01(\x0b2\x10.proto.Ti\
    mestampR\x0eexpirationTime\x129\n\x0fautoRenewPeriod\x18\x06\x20\x01(\
    \x0b2\x0f.proto.DurationR\x0fautoRenewPeriod\x12\x18\n\x07storage\x18\
    \x07\x20\x01(\x03R\x07storageB&\n\"com.hederahashgraph.api.proto.javaP\
    \x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
