// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ContractUpdateTransactionBody {
    // message fields
    pub contractID: ::protobuf::SingularPtrField<super::BasicTypes::ContractID>,
    pub expirationTime: ::protobuf::SingularPtrField<super::Timestamp::Timestamp>,
    pub adminKey: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    pub proxyAccountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub autoRenewPeriod: ::protobuf::SingularPtrField<super::Duration::Duration>,
    pub fileID: ::protobuf::SingularPtrField<super::BasicTypes::FileID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContractUpdateTransactionBody {
    pub fn new() -> ContractUpdateTransactionBody {
        ::std::default::Default::default()
    }

    // .proto.ContractID contractID = 1;

    pub fn clear_contractID(&mut self) {
        self.contractID.clear();
    }

    pub fn has_contractID(&self) -> bool {
        self.contractID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.contractID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if self.contractID.is_none() {
            self.contractID.set_default();
        }
        self.contractID.as_mut().unwrap()
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        self.contractID.take().unwrap_or_else(|| super::BasicTypes::ContractID::new())
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        self.contractID.as_ref().unwrap_or_else(|| super::BasicTypes::ContractID::default_instance())
    }

    // .proto.Timestamp expirationTime = 2;

    pub fn clear_expirationTime(&mut self) {
        self.expirationTime.clear();
    }

    pub fn has_expirationTime(&self) -> bool {
        self.expirationTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationTime(&mut self, v: super::Timestamp::Timestamp) {
        self.expirationTime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expirationTime(&mut self) -> &mut super::Timestamp::Timestamp {
        if self.expirationTime.is_none() {
            self.expirationTime.set_default();
        }
        self.expirationTime.as_mut().unwrap()
    }

    // Take field
    pub fn take_expirationTime(&mut self) -> super::Timestamp::Timestamp {
        self.expirationTime.take().unwrap_or_else(|| super::Timestamp::Timestamp::new())
    }

    pub fn get_expirationTime(&self) -> &super::Timestamp::Timestamp {
        self.expirationTime.as_ref().unwrap_or_else(|| super::Timestamp::Timestamp::default_instance())
    }

    // .proto.Key adminKey = 3;

    pub fn clear_adminKey(&mut self) {
        self.adminKey.clear();
    }

    pub fn has_adminKey(&self) -> bool {
        self.adminKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_adminKey(&mut self, v: super::BasicTypes::Key) {
        self.adminKey = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adminKey(&mut self) -> &mut super::BasicTypes::Key {
        if self.adminKey.is_none() {
            self.adminKey.set_default();
        }
        self.adminKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_adminKey(&mut self) -> super::BasicTypes::Key {
        self.adminKey.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_adminKey(&self) -> &super::BasicTypes::Key {
        self.adminKey.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }

    // .proto.AccountID proxyAccountID = 6;

    pub fn clear_proxyAccountID(&mut self) {
        self.proxyAccountID.clear();
    }

    pub fn has_proxyAccountID(&self) -> bool {
        self.proxyAccountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxyAccountID(&mut self, v: super::BasicTypes::AccountID) {
        self.proxyAccountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxyAccountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.proxyAccountID.is_none() {
            self.proxyAccountID.set_default();
        }
        self.proxyAccountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxyAccountID(&mut self) -> super::BasicTypes::AccountID {
        self.proxyAccountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_proxyAccountID(&self) -> &super::BasicTypes::AccountID {
        self.proxyAccountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // .proto.Duration autoRenewPeriod = 7;

    pub fn clear_autoRenewPeriod(&mut self) {
        self.autoRenewPeriod.clear();
    }

    pub fn has_autoRenewPeriod(&self) -> bool {
        self.autoRenewPeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autoRenewPeriod(&mut self, v: super::Duration::Duration) {
        self.autoRenewPeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_autoRenewPeriod(&mut self) -> &mut super::Duration::Duration {
        if self.autoRenewPeriod.is_none() {
            self.autoRenewPeriod.set_default();
        }
        self.autoRenewPeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_autoRenewPeriod(&mut self) -> super::Duration::Duration {
        self.autoRenewPeriod.take().unwrap_or_else(|| super::Duration::Duration::new())
    }

    pub fn get_autoRenewPeriod(&self) -> &super::Duration::Duration {
        self.autoRenewPeriod.as_ref().unwrap_or_else(|| super::Duration::Duration::default_instance())
    }

    // .proto.FileID fileID = 8;

    pub fn clear_fileID(&mut self) {
        self.fileID.clear();
    }

    pub fn has_fileID(&self) -> bool {
        self.fileID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fileID(&mut self, v: super::BasicTypes::FileID) {
        self.fileID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fileID(&mut self) -> &mut super::BasicTypes::FileID {
        if self.fileID.is_none() {
            self.fileID.set_default();
        }
        self.fileID.as_mut().unwrap()
    }

    // Take field
    pub fn take_fileID(&mut self) -> super::BasicTypes::FileID {
        self.fileID.take().unwrap_or_else(|| super::BasicTypes::FileID::new())
    }

    pub fn get_fileID(&self) -> &super::BasicTypes::FileID {
        self.fileID.as_ref().unwrap_or_else(|| super::BasicTypes::FileID::default_instance())
    }
}

impl ::protobuf::Message for ContractUpdateTransactionBody {
    fn is_initialized(&self) -> bool {
        for v in &self.contractID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expirationTime {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.adminKey {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proxyAccountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.autoRenewPeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fileID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contractID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expirationTime)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.adminKey)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proxyAccountID)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.autoRenewPeriod)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fileID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contractID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.adminKey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.fileID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contractID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.adminKey.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.fileID.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractUpdateTransactionBody {
        ContractUpdateTransactionBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ContractID>>(
                    "contractID",
                    |m: &ContractUpdateTransactionBody| { &m.contractID },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.contractID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Timestamp::Timestamp>>(
                    "expirationTime",
                    |m: &ContractUpdateTransactionBody| { &m.expirationTime },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.expirationTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "adminKey",
                    |m: &ContractUpdateTransactionBody| { &m.adminKey },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.adminKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "proxyAccountID",
                    |m: &ContractUpdateTransactionBody| { &m.proxyAccountID },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.proxyAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Duration::Duration>>(
                    "autoRenewPeriod",
                    |m: &ContractUpdateTransactionBody| { &m.autoRenewPeriod },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.autoRenewPeriod },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::FileID>>(
                    "fileID",
                    |m: &ContractUpdateTransactionBody| { &m.fileID },
                    |m: &mut ContractUpdateTransactionBody| { &mut m.fileID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContractUpdateTransactionBody>(
                    "ContractUpdateTransactionBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContractUpdateTransactionBody {
        static mut instance: ::protobuf::lazy::Lazy<ContractUpdateTransactionBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContractUpdateTransactionBody,
        };
        unsafe {
            instance.get(ContractUpdateTransactionBody::new)
        }
    }
}

impl ::protobuf::Clear for ContractUpdateTransactionBody {
    fn clear(&mut self) {
        self.clear_contractID();
        self.clear_expirationTime();
        self.clear_adminKey();
        self.clear_proxyAccountID();
        self.clear_autoRenewPeriod();
        self.clear_fileID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractUpdateTransactionBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractUpdateTransactionBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ContractUpdate.proto\x12\x05proto\x1a\x10BasicTypes.proto\x1a\x0eD\
    uration.proto\x1a\x0fTimestamp.proto\"\xd0\x02\n\x1dContractUpdateTransa\
    ctionBody\x121\n\ncontractID\x18\x01\x20\x01(\x0b2\x11.proto.ContractIDR\
    \ncontractID\x128\n\x0eexpirationTime\x18\x02\x20\x01(\x0b2\x10.proto.Ti\
    mestampR\x0eexpirationTime\x12&\n\x08adminKey\x18\x03\x20\x01(\x0b2\n.pr\
    oto.KeyR\x08adminKey\x128\n\x0eproxyAccountID\x18\x06\x20\x01(\x0b2\x10.\
    proto.AccountIDR\x0eproxyAccountID\x129\n\x0fautoRenewPeriod\x18\x07\x20\
    \x01(\x0b2\x0f.proto.DurationR\x0fautoRenewPeriod\x12%\n\x06fileID\x18\
    \x08\x20\x01(\x0b2\r.proto.FileIDR\x06fileIDB&\n\"com.hederahashgraph.ap\
    i.proto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
