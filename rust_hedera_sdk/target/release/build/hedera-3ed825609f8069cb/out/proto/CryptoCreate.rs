// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CryptoCreateTransactionBody {
    // message fields
    pub key: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    pub initialBalance: u64,
    pub proxyAccountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub proxyFraction: i32,
    pub maxReceiveProxyFraction: i32,
    pub sendRecordThreshold: u64,
    pub receiveRecordThreshold: u64,
    pub receiverSigRequired: bool,
    pub autoRenewPeriod: ::protobuf::SingularPtrField<super::Duration::Duration>,
    pub shardID: ::protobuf::SingularPtrField<super::BasicTypes::ShardID>,
    pub realmID: ::protobuf::SingularPtrField<super::BasicTypes::RealmID>,
    pub newRealmAdminKey: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoCreateTransactionBody {
    pub fn new() -> CryptoCreateTransactionBody {
        ::std::default::Default::default()
    }

    // .proto.Key key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: super::BasicTypes::Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut super::BasicTypes::Key {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> super::BasicTypes::Key {
        self.key.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_key(&self) -> &super::BasicTypes::Key {
        self.key.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }

    // uint64 initialBalance = 2;

    pub fn clear_initialBalance(&mut self) {
        self.initialBalance = 0;
    }

    // Param is passed by value, moved
    pub fn set_initialBalance(&mut self, v: u64) {
        self.initialBalance = v;
    }

    pub fn get_initialBalance(&self) -> u64 {
        self.initialBalance
    }

    // .proto.AccountID proxyAccountID = 3;

    pub fn clear_proxyAccountID(&mut self) {
        self.proxyAccountID.clear();
    }

    pub fn has_proxyAccountID(&self) -> bool {
        self.proxyAccountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxyAccountID(&mut self, v: super::BasicTypes::AccountID) {
        self.proxyAccountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxyAccountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.proxyAccountID.is_none() {
            self.proxyAccountID.set_default();
        }
        self.proxyAccountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxyAccountID(&mut self) -> super::BasicTypes::AccountID {
        self.proxyAccountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_proxyAccountID(&self) -> &super::BasicTypes::AccountID {
        self.proxyAccountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // int32 proxyFraction = 4;

    pub fn clear_proxyFraction(&mut self) {
        self.proxyFraction = 0;
    }

    // Param is passed by value, moved
    pub fn set_proxyFraction(&mut self, v: i32) {
        self.proxyFraction = v;
    }

    pub fn get_proxyFraction(&self) -> i32 {
        self.proxyFraction
    }

    // int32 maxReceiveProxyFraction = 5;

    pub fn clear_maxReceiveProxyFraction(&mut self) {
        self.maxReceiveProxyFraction = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxReceiveProxyFraction(&mut self, v: i32) {
        self.maxReceiveProxyFraction = v;
    }

    pub fn get_maxReceiveProxyFraction(&self) -> i32 {
        self.maxReceiveProxyFraction
    }

    // uint64 sendRecordThreshold = 6;

    pub fn clear_sendRecordThreshold(&mut self) {
        self.sendRecordThreshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_sendRecordThreshold(&mut self, v: u64) {
        self.sendRecordThreshold = v;
    }

    pub fn get_sendRecordThreshold(&self) -> u64 {
        self.sendRecordThreshold
    }

    // uint64 receiveRecordThreshold = 7;

    pub fn clear_receiveRecordThreshold(&mut self) {
        self.receiveRecordThreshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiveRecordThreshold(&mut self, v: u64) {
        self.receiveRecordThreshold = v;
    }

    pub fn get_receiveRecordThreshold(&self) -> u64 {
        self.receiveRecordThreshold
    }

    // bool receiverSigRequired = 8;

    pub fn clear_receiverSigRequired(&mut self) {
        self.receiverSigRequired = false;
    }

    // Param is passed by value, moved
    pub fn set_receiverSigRequired(&mut self, v: bool) {
        self.receiverSigRequired = v;
    }

    pub fn get_receiverSigRequired(&self) -> bool {
        self.receiverSigRequired
    }

    // .proto.Duration autoRenewPeriod = 9;

    pub fn clear_autoRenewPeriod(&mut self) {
        self.autoRenewPeriod.clear();
    }

    pub fn has_autoRenewPeriod(&self) -> bool {
        self.autoRenewPeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autoRenewPeriod(&mut self, v: super::Duration::Duration) {
        self.autoRenewPeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_autoRenewPeriod(&mut self) -> &mut super::Duration::Duration {
        if self.autoRenewPeriod.is_none() {
            self.autoRenewPeriod.set_default();
        }
        self.autoRenewPeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_autoRenewPeriod(&mut self) -> super::Duration::Duration {
        self.autoRenewPeriod.take().unwrap_or_else(|| super::Duration::Duration::new())
    }

    pub fn get_autoRenewPeriod(&self) -> &super::Duration::Duration {
        self.autoRenewPeriod.as_ref().unwrap_or_else(|| super::Duration::Duration::default_instance())
    }

    // .proto.ShardID shardID = 10;

    pub fn clear_shardID(&mut self) {
        self.shardID.clear();
    }

    pub fn has_shardID(&self) -> bool {
        self.shardID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shardID(&mut self, v: super::BasicTypes::ShardID) {
        self.shardID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shardID(&mut self) -> &mut super::BasicTypes::ShardID {
        if self.shardID.is_none() {
            self.shardID.set_default();
        }
        self.shardID.as_mut().unwrap()
    }

    // Take field
    pub fn take_shardID(&mut self) -> super::BasicTypes::ShardID {
        self.shardID.take().unwrap_or_else(|| super::BasicTypes::ShardID::new())
    }

    pub fn get_shardID(&self) -> &super::BasicTypes::ShardID {
        self.shardID.as_ref().unwrap_or_else(|| super::BasicTypes::ShardID::default_instance())
    }

    // .proto.RealmID realmID = 11;

    pub fn clear_realmID(&mut self) {
        self.realmID.clear();
    }

    pub fn has_realmID(&self) -> bool {
        self.realmID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_realmID(&mut self, v: super::BasicTypes::RealmID) {
        self.realmID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_realmID(&mut self) -> &mut super::BasicTypes::RealmID {
        if self.realmID.is_none() {
            self.realmID.set_default();
        }
        self.realmID.as_mut().unwrap()
    }

    // Take field
    pub fn take_realmID(&mut self) -> super::BasicTypes::RealmID {
        self.realmID.take().unwrap_or_else(|| super::BasicTypes::RealmID::new())
    }

    pub fn get_realmID(&self) -> &super::BasicTypes::RealmID {
        self.realmID.as_ref().unwrap_or_else(|| super::BasicTypes::RealmID::default_instance())
    }

    // .proto.Key newRealmAdminKey = 12;

    pub fn clear_newRealmAdminKey(&mut self) {
        self.newRealmAdminKey.clear();
    }

    pub fn has_newRealmAdminKey(&self) -> bool {
        self.newRealmAdminKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newRealmAdminKey(&mut self, v: super::BasicTypes::Key) {
        self.newRealmAdminKey = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_newRealmAdminKey(&mut self) -> &mut super::BasicTypes::Key {
        if self.newRealmAdminKey.is_none() {
            self.newRealmAdminKey.set_default();
        }
        self.newRealmAdminKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_newRealmAdminKey(&mut self) -> super::BasicTypes::Key {
        self.newRealmAdminKey.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_newRealmAdminKey(&self) -> &super::BasicTypes::Key {
        self.newRealmAdminKey.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }
}

impl ::protobuf::Message for CryptoCreateTransactionBody {
    fn is_initialized(&self) -> bool {
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proxyAccountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.autoRenewPeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shardID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.realmID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.newRealmAdminKey {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.initialBalance = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proxyAccountID)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.proxyFraction = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.maxReceiveProxyFraction = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sendRecordThreshold = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiveRecordThreshold = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.receiverSigRequired = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.autoRenewPeriod)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shardID)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.realmID)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.newRealmAdminKey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.initialBalance != 0 {
            my_size += ::protobuf::rt::value_size(2, self.initialBalance, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.proxyFraction != 0 {
            my_size += ::protobuf::rt::value_size(4, self.proxyFraction, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxReceiveProxyFraction != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maxReceiveProxyFraction, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sendRecordThreshold != 0 {
            my_size += ::protobuf::rt::value_size(6, self.sendRecordThreshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiveRecordThreshold != 0 {
            my_size += ::protobuf::rt::value_size(7, self.receiveRecordThreshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiverSigRequired != false {
            my_size += 2;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.shardID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.realmID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.newRealmAdminKey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.initialBalance != 0 {
            os.write_uint64(2, self.initialBalance)?;
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.proxyFraction != 0 {
            os.write_int32(4, self.proxyFraction)?;
        }
        if self.maxReceiveProxyFraction != 0 {
            os.write_int32(5, self.maxReceiveProxyFraction)?;
        }
        if self.sendRecordThreshold != 0 {
            os.write_uint64(6, self.sendRecordThreshold)?;
        }
        if self.receiveRecordThreshold != 0 {
            os.write_uint64(7, self.receiveRecordThreshold)?;
        }
        if self.receiverSigRequired != false {
            os.write_bool(8, self.receiverSigRequired)?;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.shardID.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.realmID.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.newRealmAdminKey.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoCreateTransactionBody {
        CryptoCreateTransactionBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "key",
                    |m: &CryptoCreateTransactionBody| { &m.key },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "initialBalance",
                    |m: &CryptoCreateTransactionBody| { &m.initialBalance },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.initialBalance },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "proxyAccountID",
                    |m: &CryptoCreateTransactionBody| { &m.proxyAccountID },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.proxyAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "proxyFraction",
                    |m: &CryptoCreateTransactionBody| { &m.proxyFraction },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.proxyFraction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "maxReceiveProxyFraction",
                    |m: &CryptoCreateTransactionBody| { &m.maxReceiveProxyFraction },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.maxReceiveProxyFraction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sendRecordThreshold",
                    |m: &CryptoCreateTransactionBody| { &m.sendRecordThreshold },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.sendRecordThreshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receiveRecordThreshold",
                    |m: &CryptoCreateTransactionBody| { &m.receiveRecordThreshold },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.receiveRecordThreshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "receiverSigRequired",
                    |m: &CryptoCreateTransactionBody| { &m.receiverSigRequired },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.receiverSigRequired },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Duration::Duration>>(
                    "autoRenewPeriod",
                    |m: &CryptoCreateTransactionBody| { &m.autoRenewPeriod },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.autoRenewPeriod },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::ShardID>>(
                    "shardID",
                    |m: &CryptoCreateTransactionBody| { &m.shardID },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.shardID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::RealmID>>(
                    "realmID",
                    |m: &CryptoCreateTransactionBody| { &m.realmID },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.realmID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "newRealmAdminKey",
                    |m: &CryptoCreateTransactionBody| { &m.newRealmAdminKey },
                    |m: &mut CryptoCreateTransactionBody| { &mut m.newRealmAdminKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoCreateTransactionBody>(
                    "CryptoCreateTransactionBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoCreateTransactionBody {
        static mut instance: ::protobuf::lazy::Lazy<CryptoCreateTransactionBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoCreateTransactionBody,
        };
        unsafe {
            instance.get(CryptoCreateTransactionBody::new)
        }
    }
}

impl ::protobuf::Clear for CryptoCreateTransactionBody {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_initialBalance();
        self.clear_proxyAccountID();
        self.clear_proxyFraction();
        self.clear_maxReceiveProxyFraction();
        self.clear_sendRecordThreshold();
        self.clear_receiveRecordThreshold();
        self.clear_receiverSigRequired();
        self.clear_autoRenewPeriod();
        self.clear_shardID();
        self.clear_realmID();
        self.clear_newRealmAdminKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoCreateTransactionBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoCreateTransactionBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CryptoCreate.proto\x12\x05proto\x1a\x10BasicTypes.proto\x1a\x0eDur\
    ation.proto\"\xe0\x04\n\x1bCryptoCreateTransactionBody\x12\x1c\n\x03key\
    \x18\x01\x20\x01(\x0b2\n.proto.KeyR\x03key\x12&\n\x0einitialBalance\x18\
    \x02\x20\x01(\x04R\x0einitialBalance\x128\n\x0eproxyAccountID\x18\x03\
    \x20\x01(\x0b2\x10.proto.AccountIDR\x0eproxyAccountID\x12$\n\rproxyFract\
    ion\x18\x04\x20\x01(\x05R\rproxyFraction\x128\n\x17maxReceiveProxyFracti\
    on\x18\x05\x20\x01(\x05R\x17maxReceiveProxyFraction\x120\n\x13sendRecord\
    Threshold\x18\x06\x20\x01(\x04R\x13sendRecordThreshold\x126\n\x16receive\
    RecordThreshold\x18\x07\x20\x01(\x04R\x16receiveRecordThreshold\x120\n\
    \x13receiverSigRequired\x18\x08\x20\x01(\x08R\x13receiverSigRequired\x12\
    9\n\x0fautoRenewPeriod\x18\t\x20\x01(\x0b2\x0f.proto.DurationR\x0fautoRe\
    newPeriod\x12(\n\x07shardID\x18\n\x20\x01(\x0b2\x0e.proto.ShardIDR\x07sh\
    ardID\x12(\n\x07realmID\x18\x0b\x20\x01(\x0b2\x0e.proto.RealmIDR\x07real\
    mID\x126\n\x10newRealmAdminKey\x18\x0c\x20\x01(\x0b2\n.proto.KeyR\x10new\
    RealmAdminKeyB&\n\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
