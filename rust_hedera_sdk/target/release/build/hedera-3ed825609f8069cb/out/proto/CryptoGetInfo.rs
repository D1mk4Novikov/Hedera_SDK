// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CryptoGetInfoQuery {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::QueryHeader::QueryHeader>,
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoGetInfoQuery {
    pub fn new() -> CryptoGetInfoQuery {
        ::std::default::Default::default()
    }

    // .proto.QueryHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::QueryHeader::QueryHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::QueryHeader::QueryHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::QueryHeader::QueryHeader {
        self.header.take().unwrap_or_else(|| super::QueryHeader::QueryHeader::new())
    }

    pub fn get_header(&self) -> &super::QueryHeader::QueryHeader {
        self.header.as_ref().unwrap_or_else(|| super::QueryHeader::QueryHeader::default_instance())
    }

    // .proto.AccountID accountID = 2;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }
}

impl ::protobuf::Message for CryptoGetInfoQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoGetInfoQuery {
        CryptoGetInfoQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::QueryHeader::QueryHeader>>(
                    "header",
                    |m: &CryptoGetInfoQuery| { &m.header },
                    |m: &mut CryptoGetInfoQuery| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &CryptoGetInfoQuery| { &m.accountID },
                    |m: &mut CryptoGetInfoQuery| { &mut m.accountID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoGetInfoQuery>(
                    "CryptoGetInfoQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoGetInfoQuery {
        static mut instance: ::protobuf::lazy::Lazy<CryptoGetInfoQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoGetInfoQuery,
        };
        unsafe {
            instance.get(CryptoGetInfoQuery::new)
        }
    }
}

impl ::protobuf::Clear for CryptoGetInfoQuery {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_accountID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoGetInfoQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoGetInfoQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CryptoGetInfoResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::ResponseHeader::ResponseHeader>,
    pub accountInfo: ::protobuf::SingularPtrField<CryptoGetInfoResponse_AccountInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoGetInfoResponse {
    pub fn new() -> CryptoGetInfoResponse {
        ::std::default::Default::default()
    }

    // .proto.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::ResponseHeader::ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::ResponseHeader::ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::ResponseHeader::ResponseHeader {
        self.header.take().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::new())
    }

    pub fn get_header(&self) -> &super::ResponseHeader::ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::default_instance())
    }

    // .proto.CryptoGetInfoResponse.AccountInfo accountInfo = 2;

    pub fn clear_accountInfo(&mut self) {
        self.accountInfo.clear();
    }

    pub fn has_accountInfo(&self) -> bool {
        self.accountInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountInfo(&mut self, v: CryptoGetInfoResponse_AccountInfo) {
        self.accountInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountInfo(&mut self) -> &mut CryptoGetInfoResponse_AccountInfo {
        if self.accountInfo.is_none() {
            self.accountInfo.set_default();
        }
        self.accountInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountInfo(&mut self) -> CryptoGetInfoResponse_AccountInfo {
        self.accountInfo.take().unwrap_or_else(|| CryptoGetInfoResponse_AccountInfo::new())
    }

    pub fn get_accountInfo(&self) -> &CryptoGetInfoResponse_AccountInfo {
        self.accountInfo.as_ref().unwrap_or_else(|| CryptoGetInfoResponse_AccountInfo::default_instance())
    }
}

impl ::protobuf::Message for CryptoGetInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accountInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accountInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accountInfo.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoGetInfoResponse {
        CryptoGetInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ResponseHeader::ResponseHeader>>(
                    "header",
                    |m: &CryptoGetInfoResponse| { &m.header },
                    |m: &mut CryptoGetInfoResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CryptoGetInfoResponse_AccountInfo>>(
                    "accountInfo",
                    |m: &CryptoGetInfoResponse| { &m.accountInfo },
                    |m: &mut CryptoGetInfoResponse| { &mut m.accountInfo },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoGetInfoResponse>(
                    "CryptoGetInfoResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoGetInfoResponse {
        static mut instance: ::protobuf::lazy::Lazy<CryptoGetInfoResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoGetInfoResponse,
        };
        unsafe {
            instance.get(CryptoGetInfoResponse::new)
        }
    }
}

impl ::protobuf::Clear for CryptoGetInfoResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_accountInfo();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoGetInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoGetInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CryptoGetInfoResponse_AccountInfo {
    // message fields
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub contractAccountID: ::std::string::String,
    pub deleted: bool,
    pub proxyAccountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub proxyFraction: i32,
    pub proxyReceived: i64,
    pub key: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    pub balance: u64,
    pub generateSendRecordThreshold: u64,
    pub generateReceiveRecordThreshold: u64,
    pub receiverSigRequired: bool,
    pub expirationTime: ::protobuf::SingularPtrField<super::Timestamp::Timestamp>,
    pub autoRenewPeriod: ::protobuf::SingularPtrField<super::Duration::Duration>,
    pub claims: ::protobuf::RepeatedField<super::CryptoAddClaim::Claim>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoGetInfoResponse_AccountInfo {
    pub fn new() -> CryptoGetInfoResponse_AccountInfo {
        ::std::default::Default::default()
    }

    // .proto.AccountID accountID = 1;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // string contractAccountID = 2;

    pub fn clear_contractAccountID(&mut self) {
        self.contractAccountID.clear();
    }

    // Param is passed by value, moved
    pub fn set_contractAccountID(&mut self, v: ::std::string::String) {
        self.contractAccountID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contractAccountID(&mut self) -> &mut ::std::string::String {
        &mut self.contractAccountID
    }

    // Take field
    pub fn take_contractAccountID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contractAccountID, ::std::string::String::new())
    }

    pub fn get_contractAccountID(&self) -> &str {
        &self.contractAccountID
    }

    // bool deleted = 3;

    pub fn clear_deleted(&mut self) {
        self.deleted = false;
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = v;
    }

    pub fn get_deleted(&self) -> bool {
        self.deleted
    }

    // .proto.AccountID proxyAccountID = 4;

    pub fn clear_proxyAccountID(&mut self) {
        self.proxyAccountID.clear();
    }

    pub fn has_proxyAccountID(&self) -> bool {
        self.proxyAccountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxyAccountID(&mut self, v: super::BasicTypes::AccountID) {
        self.proxyAccountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxyAccountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.proxyAccountID.is_none() {
            self.proxyAccountID.set_default();
        }
        self.proxyAccountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxyAccountID(&mut self) -> super::BasicTypes::AccountID {
        self.proxyAccountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_proxyAccountID(&self) -> &super::BasicTypes::AccountID {
        self.proxyAccountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // int32 proxyFraction = 5;

    pub fn clear_proxyFraction(&mut self) {
        self.proxyFraction = 0;
    }

    // Param is passed by value, moved
    pub fn set_proxyFraction(&mut self, v: i32) {
        self.proxyFraction = v;
    }

    pub fn get_proxyFraction(&self) -> i32 {
        self.proxyFraction
    }

    // int64 proxyReceived = 6;

    pub fn clear_proxyReceived(&mut self) {
        self.proxyReceived = 0;
    }

    // Param is passed by value, moved
    pub fn set_proxyReceived(&mut self, v: i64) {
        self.proxyReceived = v;
    }

    pub fn get_proxyReceived(&self) -> i64 {
        self.proxyReceived
    }

    // .proto.Key key = 7;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: super::BasicTypes::Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut super::BasicTypes::Key {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> super::BasicTypes::Key {
        self.key.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_key(&self) -> &super::BasicTypes::Key {
        self.key.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }

    // uint64 balance = 8;

    pub fn clear_balance(&mut self) {
        self.balance = 0;
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: u64) {
        self.balance = v;
    }

    pub fn get_balance(&self) -> u64 {
        self.balance
    }

    // uint64 generateSendRecordThreshold = 9;

    pub fn clear_generateSendRecordThreshold(&mut self) {
        self.generateSendRecordThreshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_generateSendRecordThreshold(&mut self, v: u64) {
        self.generateSendRecordThreshold = v;
    }

    pub fn get_generateSendRecordThreshold(&self) -> u64 {
        self.generateSendRecordThreshold
    }

    // uint64 generateReceiveRecordThreshold = 10;

    pub fn clear_generateReceiveRecordThreshold(&mut self) {
        self.generateReceiveRecordThreshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_generateReceiveRecordThreshold(&mut self, v: u64) {
        self.generateReceiveRecordThreshold = v;
    }

    pub fn get_generateReceiveRecordThreshold(&self) -> u64 {
        self.generateReceiveRecordThreshold
    }

    // bool receiverSigRequired = 11;

    pub fn clear_receiverSigRequired(&mut self) {
        self.receiverSigRequired = false;
    }

    // Param is passed by value, moved
    pub fn set_receiverSigRequired(&mut self, v: bool) {
        self.receiverSigRequired = v;
    }

    pub fn get_receiverSigRequired(&self) -> bool {
        self.receiverSigRequired
    }

    // .proto.Timestamp expirationTime = 12;

    pub fn clear_expirationTime(&mut self) {
        self.expirationTime.clear();
    }

    pub fn has_expirationTime(&self) -> bool {
        self.expirationTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expirationTime(&mut self, v: super::Timestamp::Timestamp) {
        self.expirationTime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expirationTime(&mut self) -> &mut super::Timestamp::Timestamp {
        if self.expirationTime.is_none() {
            self.expirationTime.set_default();
        }
        self.expirationTime.as_mut().unwrap()
    }

    // Take field
    pub fn take_expirationTime(&mut self) -> super::Timestamp::Timestamp {
        self.expirationTime.take().unwrap_or_else(|| super::Timestamp::Timestamp::new())
    }

    pub fn get_expirationTime(&self) -> &super::Timestamp::Timestamp {
        self.expirationTime.as_ref().unwrap_or_else(|| super::Timestamp::Timestamp::default_instance())
    }

    // .proto.Duration autoRenewPeriod = 13;

    pub fn clear_autoRenewPeriod(&mut self) {
        self.autoRenewPeriod.clear();
    }

    pub fn has_autoRenewPeriod(&self) -> bool {
        self.autoRenewPeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autoRenewPeriod(&mut self, v: super::Duration::Duration) {
        self.autoRenewPeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_autoRenewPeriod(&mut self) -> &mut super::Duration::Duration {
        if self.autoRenewPeriod.is_none() {
            self.autoRenewPeriod.set_default();
        }
        self.autoRenewPeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_autoRenewPeriod(&mut self) -> super::Duration::Duration {
        self.autoRenewPeriod.take().unwrap_or_else(|| super::Duration::Duration::new())
    }

    pub fn get_autoRenewPeriod(&self) -> &super::Duration::Duration {
        self.autoRenewPeriod.as_ref().unwrap_or_else(|| super::Duration::Duration::default_instance())
    }

    // repeated .proto.Claim claims = 14;

    pub fn clear_claims(&mut self) {
        self.claims.clear();
    }

    // Param is passed by value, moved
    pub fn set_claims(&mut self, v: ::protobuf::RepeatedField<super::CryptoAddClaim::Claim>) {
        self.claims = v;
    }

    // Mutable pointer to the field.
    pub fn mut_claims(&mut self) -> &mut ::protobuf::RepeatedField<super::CryptoAddClaim::Claim> {
        &mut self.claims
    }

    // Take field
    pub fn take_claims(&mut self) -> ::protobuf::RepeatedField<super::CryptoAddClaim::Claim> {
        ::std::mem::replace(&mut self.claims, ::protobuf::RepeatedField::new())
    }

    pub fn get_claims(&self) -> &[super::CryptoAddClaim::Claim] {
        &self.claims
    }
}

impl ::protobuf::Message for CryptoGetInfoResponse_AccountInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proxyAccountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expirationTime {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.autoRenewPeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.claims {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contractAccountID)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deleted = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proxyAccountID)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.proxyFraction = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.proxyReceived = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.balance = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.generateSendRecordThreshold = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.generateReceiveRecordThreshold = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.receiverSigRequired = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expirationTime)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.autoRenewPeriod)?;
                },
                14 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.claims)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.contractAccountID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contractAccountID);
        }
        if self.deleted != false {
            my_size += 2;
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.proxyFraction != 0 {
            my_size += ::protobuf::rt::value_size(5, self.proxyFraction, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.proxyReceived != 0 {
            my_size += ::protobuf::rt::value_size(6, self.proxyReceived, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.balance != 0 {
            my_size += ::protobuf::rt::value_size(8, self.balance, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.generateSendRecordThreshold != 0 {
            my_size += ::protobuf::rt::value_size(9, self.generateSendRecordThreshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.generateReceiveRecordThreshold != 0 {
            my_size += ::protobuf::rt::value_size(10, self.generateReceiveRecordThreshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiverSigRequired != false {
            my_size += 2;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.claims {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.contractAccountID.is_empty() {
            os.write_string(2, &self.contractAccountID)?;
        }
        if self.deleted != false {
            os.write_bool(3, self.deleted)?;
        }
        if let Some(ref v) = self.proxyAccountID.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.proxyFraction != 0 {
            os.write_int32(5, self.proxyFraction)?;
        }
        if self.proxyReceived != 0 {
            os.write_int64(6, self.proxyReceived)?;
        }
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.balance != 0 {
            os.write_uint64(8, self.balance)?;
        }
        if self.generateSendRecordThreshold != 0 {
            os.write_uint64(9, self.generateSendRecordThreshold)?;
        }
        if self.generateReceiveRecordThreshold != 0 {
            os.write_uint64(10, self.generateReceiveRecordThreshold)?;
        }
        if self.receiverSigRequired != false {
            os.write_bool(11, self.receiverSigRequired)?;
        }
        if let Some(ref v) = self.expirationTime.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.autoRenewPeriod.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.claims {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoGetInfoResponse_AccountInfo {
        CryptoGetInfoResponse_AccountInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.accountID },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.accountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contractAccountID",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.contractAccountID },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.contractAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "deleted",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.deleted },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.deleted },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "proxyAccountID",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.proxyAccountID },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.proxyAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "proxyFraction",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.proxyFraction },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.proxyFraction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "proxyReceived",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.proxyReceived },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.proxyReceived },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "key",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.key },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "balance",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.balance },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.balance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "generateSendRecordThreshold",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.generateSendRecordThreshold },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.generateSendRecordThreshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "generateReceiveRecordThreshold",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.generateReceiveRecordThreshold },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.generateReceiveRecordThreshold },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "receiverSigRequired",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.receiverSigRequired },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.receiverSigRequired },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Timestamp::Timestamp>>(
                    "expirationTime",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.expirationTime },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.expirationTime },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Duration::Duration>>(
                    "autoRenewPeriod",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.autoRenewPeriod },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.autoRenewPeriod },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::CryptoAddClaim::Claim>>(
                    "claims",
                    |m: &CryptoGetInfoResponse_AccountInfo| { &m.claims },
                    |m: &mut CryptoGetInfoResponse_AccountInfo| { &mut m.claims },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoGetInfoResponse_AccountInfo>(
                    "CryptoGetInfoResponse_AccountInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoGetInfoResponse_AccountInfo {
        static mut instance: ::protobuf::lazy::Lazy<CryptoGetInfoResponse_AccountInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoGetInfoResponse_AccountInfo,
        };
        unsafe {
            instance.get(CryptoGetInfoResponse_AccountInfo::new)
        }
    }
}

impl ::protobuf::Clear for CryptoGetInfoResponse_AccountInfo {
    fn clear(&mut self) {
        self.clear_accountID();
        self.clear_contractAccountID();
        self.clear_deleted();
        self.clear_proxyAccountID();
        self.clear_proxyFraction();
        self.clear_proxyReceived();
        self.clear_key();
        self.clear_balance();
        self.clear_generateSendRecordThreshold();
        self.clear_generateReceiveRecordThreshold();
        self.clear_receiverSigRequired();
        self.clear_expirationTime();
        self.clear_autoRenewPeriod();
        self.clear_claims();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoGetInfoResponse_AccountInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoGetInfoResponse_AccountInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13CryptoGetInfo.proto\x12\x05proto\x1a\x0fTimestamp.proto\x1a\x0eDur\
    ation.proto\x1a\x10BasicTypes.proto\x1a\x11QueryHeader.proto\x1a\x14Resp\
    onseHeader.proto\x1a\x14CryptoAddClaim.proto\"p\n\x12CryptoGetInfoQuery\
    \x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.proto.QueryHeaderR\x06header\
    \x12.\n\taccountID\x18\x02\x20\x01(\x0b2\x10.proto.AccountIDR\taccountID\
    \"\xaf\x06\n\x15CryptoGetInfoResponse\x12-\n\x06header\x18\x01\x20\x01(\
    \x0b2\x15.proto.ResponseHeaderR\x06header\x12J\n\x0baccountInfo\x18\x02\
    \x20\x01(\x0b2(.proto.CryptoGetInfoResponse.AccountInfoR\x0baccountInfo\
    \x1a\x9a\x05\n\x0bAccountInfo\x12.\n\taccountID\x18\x01\x20\x01(\x0b2\
    \x10.proto.AccountIDR\taccountID\x12,\n\x11contractAccountID\x18\x02\x20\
    \x01(\tR\x11contractAccountID\x12\x18\n\x07deleted\x18\x03\x20\x01(\x08R\
    \x07deleted\x128\n\x0eproxyAccountID\x18\x04\x20\x01(\x0b2\x10.proto.Acc\
    ountIDR\x0eproxyAccountID\x12$\n\rproxyFraction\x18\x05\x20\x01(\x05R\rp\
    roxyFraction\x12$\n\rproxyReceived\x18\x06\x20\x01(\x03R\rproxyReceived\
    \x12\x1c\n\x03key\x18\x07\x20\x01(\x0b2\n.proto.KeyR\x03key\x12\x18\n\
    \x07balance\x18\x08\x20\x01(\x04R\x07balance\x12@\n\x1bgenerateSendRecor\
    dThreshold\x18\t\x20\x01(\x04R\x1bgenerateSendRecordThreshold\x12F\n\x1e\
    generateReceiveRecordThreshold\x18\n\x20\x01(\x04R\x1egenerateReceiveRec\
    ordThreshold\x120\n\x13receiverSigRequired\x18\x0b\x20\x01(\x08R\x13rece\
    iverSigRequired\x128\n\x0eexpirationTime\x18\x0c\x20\x01(\x0b2\x10.proto\
    .TimestampR\x0eexpirationTime\x129\n\x0fautoRenewPeriod\x18\r\x20\x01(\
    \x0b2\x0f.proto.DurationR\x0fautoRenewPeriod\x12$\n\x06claims\x18\x0e\
    \x20\x03(\x0b2\x0c.proto.ClaimR\x06claimsB&\n\"com.hederahashgraph.api.p\
    roto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
