// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CryptoGetStakersQuery {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::QueryHeader::QueryHeader>,
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoGetStakersQuery {
    pub fn new() -> CryptoGetStakersQuery {
        ::std::default::Default::default()
    }

    // .proto.QueryHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::QueryHeader::QueryHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::QueryHeader::QueryHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::QueryHeader::QueryHeader {
        self.header.take().unwrap_or_else(|| super::QueryHeader::QueryHeader::new())
    }

    pub fn get_header(&self) -> &super::QueryHeader::QueryHeader {
        self.header.as_ref().unwrap_or_else(|| super::QueryHeader::QueryHeader::default_instance())
    }

    // .proto.AccountID accountID = 2;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }
}

impl ::protobuf::Message for CryptoGetStakersQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoGetStakersQuery {
        CryptoGetStakersQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::QueryHeader::QueryHeader>>(
                    "header",
                    |m: &CryptoGetStakersQuery| { &m.header },
                    |m: &mut CryptoGetStakersQuery| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &CryptoGetStakersQuery| { &m.accountID },
                    |m: &mut CryptoGetStakersQuery| { &mut m.accountID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoGetStakersQuery>(
                    "CryptoGetStakersQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoGetStakersQuery {
        static mut instance: ::protobuf::lazy::Lazy<CryptoGetStakersQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoGetStakersQuery,
        };
        unsafe {
            instance.get(CryptoGetStakersQuery::new)
        }
    }
}

impl ::protobuf::Clear for CryptoGetStakersQuery {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_accountID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoGetStakersQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoGetStakersQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProxyStaker {
    // message fields
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub amount: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ProxyStaker {
    pub fn new() -> ProxyStaker {
        ::std::default::Default::default()
    }

    // .proto.AccountID accountID = 1;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // int64 amount = 2;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> i64 {
        self.amount
    }
}

impl ::protobuf::Message for ProxyStaker {
    fn is_initialized(&self) -> bool {
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.amount != 0 {
            os.write_int64(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyStaker {
        ProxyStaker::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &ProxyStaker| { &m.accountID },
                    |m: &mut ProxyStaker| { &mut m.accountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "amount",
                    |m: &ProxyStaker| { &m.amount },
                    |m: &mut ProxyStaker| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProxyStaker>(
                    "ProxyStaker",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProxyStaker {
        static mut instance: ::protobuf::lazy::Lazy<ProxyStaker> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProxyStaker,
        };
        unsafe {
            instance.get(ProxyStaker::new)
        }
    }
}

impl ::protobuf::Clear for ProxyStaker {
    fn clear(&mut self) {
        self.clear_accountID();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyStaker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyStaker {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllProxyStakers {
    // message fields
    pub accountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub proxyStaker: ::protobuf::RepeatedField<ProxyStaker>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AllProxyStakers {
    pub fn new() -> AllProxyStakers {
        ::std::default::Default::default()
    }

    // .proto.AccountID accountID = 1;

    pub fn clear_accountID(&mut self) {
        self.accountID.clear();
    }

    pub fn has_accountID(&self) -> bool {
        self.accountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.accountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.accountID.is_none() {
            self.accountID.set_default();
        }
        self.accountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        self.accountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        self.accountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // repeated .proto.ProxyStaker proxyStaker = 2;

    pub fn clear_proxyStaker(&mut self) {
        self.proxyStaker.clear();
    }

    // Param is passed by value, moved
    pub fn set_proxyStaker(&mut self, v: ::protobuf::RepeatedField<ProxyStaker>) {
        self.proxyStaker = v;
    }

    // Mutable pointer to the field.
    pub fn mut_proxyStaker(&mut self) -> &mut ::protobuf::RepeatedField<ProxyStaker> {
        &mut self.proxyStaker
    }

    // Take field
    pub fn take_proxyStaker(&mut self) -> ::protobuf::RepeatedField<ProxyStaker> {
        ::std::mem::replace(&mut self.proxyStaker, ::protobuf::RepeatedField::new())
    }

    pub fn get_proxyStaker(&self) -> &[ProxyStaker] {
        &self.proxyStaker
    }
}

impl ::protobuf::Message for AllProxyStakers {
    fn is_initialized(&self) -> bool {
        for v in &self.accountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proxyStaker {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accountID)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.proxyStaker)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.accountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.proxyStaker {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.accountID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.proxyStaker {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AllProxyStakers {
        AllProxyStakers::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "accountID",
                    |m: &AllProxyStakers| { &m.accountID },
                    |m: &mut AllProxyStakers| { &mut m.accountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProxyStaker>>(
                    "proxyStaker",
                    |m: &AllProxyStakers| { &m.proxyStaker },
                    |m: &mut AllProxyStakers| { &mut m.proxyStaker },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AllProxyStakers>(
                    "AllProxyStakers",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AllProxyStakers {
        static mut instance: ::protobuf::lazy::Lazy<AllProxyStakers> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AllProxyStakers,
        };
        unsafe {
            instance.get(AllProxyStakers::new)
        }
    }
}

impl ::protobuf::Clear for AllProxyStakers {
    fn clear(&mut self) {
        self.clear_accountID();
        self.clear_proxyStaker();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllProxyStakers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllProxyStakers {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CryptoGetStakersResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::ResponseHeader::ResponseHeader>,
    pub stakers: ::protobuf::SingularPtrField<AllProxyStakers>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CryptoGetStakersResponse {
    pub fn new() -> CryptoGetStakersResponse {
        ::std::default::Default::default()
    }

    // .proto.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::ResponseHeader::ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::ResponseHeader::ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::ResponseHeader::ResponseHeader {
        self.header.take().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::new())
    }

    pub fn get_header(&self) -> &super::ResponseHeader::ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::default_instance())
    }

    // .proto.AllProxyStakers stakers = 3;

    pub fn clear_stakers(&mut self) {
        self.stakers.clear();
    }

    pub fn has_stakers(&self) -> bool {
        self.stakers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stakers(&mut self, v: AllProxyStakers) {
        self.stakers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stakers(&mut self) -> &mut AllProxyStakers {
        if self.stakers.is_none() {
            self.stakers.set_default();
        }
        self.stakers.as_mut().unwrap()
    }

    // Take field
    pub fn take_stakers(&mut self) -> AllProxyStakers {
        self.stakers.take().unwrap_or_else(|| AllProxyStakers::new())
    }

    pub fn get_stakers(&self) -> &AllProxyStakers {
        self.stakers.as_ref().unwrap_or_else(|| AllProxyStakers::default_instance())
    }
}

impl ::protobuf::Message for CryptoGetStakersResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stakers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stakers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stakers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stakers.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptoGetStakersResponse {
        CryptoGetStakersResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ResponseHeader::ResponseHeader>>(
                    "header",
                    |m: &CryptoGetStakersResponse| { &m.header },
                    |m: &mut CryptoGetStakersResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AllProxyStakers>>(
                    "stakers",
                    |m: &CryptoGetStakersResponse| { &m.stakers },
                    |m: &mut CryptoGetStakersResponse| { &mut m.stakers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CryptoGetStakersResponse>(
                    "CryptoGetStakersResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CryptoGetStakersResponse {
        static mut instance: ::protobuf::lazy::Lazy<CryptoGetStakersResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CryptoGetStakersResponse,
        };
        unsafe {
            instance.get(CryptoGetStakersResponse::new)
        }
    }
}

impl ::protobuf::Clear for CryptoGetStakersResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_stakers();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CryptoGetStakersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptoGetStakersResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16CryptoGetStakers.proto\x12\x05proto\x1a\x10BasicTypes.proto\x1a\
    \x11QueryHeader.proto\x1a\x14ResponseHeader.proto\"s\n\x15CryptoGetStake\
    rsQuery\x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.proto.QueryHeaderR\
    \x06header\x12.\n\taccountID\x18\x02\x20\x01(\x0b2\x10.proto.AccountIDR\
    \taccountID\"U\n\x0bProxyStaker\x12.\n\taccountID\x18\x01\x20\x01(\x0b2\
    \x10.proto.AccountIDR\taccountID\x12\x16\n\x06amount\x18\x02\x20\x01(\
    \x03R\x06amount\"w\n\x0fAllProxyStakers\x12.\n\taccountID\x18\x01\x20\
    \x01(\x0b2\x10.proto.AccountIDR\taccountID\x124\n\x0bproxyStaker\x18\x02\
    \x20\x03(\x0b2\x12.proto.ProxyStakerR\x0bproxyStaker\"{\n\x18CryptoGetSt\
    akersResponse\x12-\n\x06header\x18\x01\x20\x01(\x0b2\x15.proto.ResponseH\
    eaderR\x06header\x120\n\x07stakers\x18\x03\x20\x01(\x0b2\x16.proto.AllPr\
    oxyStakersR\x07stakersB&\n\"com.hederahashgraph.api.proto.javaP\x01b\x06\
    proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
