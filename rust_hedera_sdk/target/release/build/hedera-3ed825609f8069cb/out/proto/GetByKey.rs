// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct GetByKeyQuery {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::QueryHeader::QueryHeader>,
    pub key: ::protobuf::SingularPtrField<super::BasicTypes::Key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetByKeyQuery {
    pub fn new() -> GetByKeyQuery {
        ::std::default::Default::default()
    }

    // .proto.QueryHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::QueryHeader::QueryHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::QueryHeader::QueryHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::QueryHeader::QueryHeader {
        self.header.take().unwrap_or_else(|| super::QueryHeader::QueryHeader::new())
    }

    pub fn get_header(&self) -> &super::QueryHeader::QueryHeader {
        self.header.as_ref().unwrap_or_else(|| super::QueryHeader::QueryHeader::default_instance())
    }

    // .proto.Key key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: super::BasicTypes::Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut super::BasicTypes::Key {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> super::BasicTypes::Key {
        self.key.take().unwrap_or_else(|| super::BasicTypes::Key::new())
    }

    pub fn get_key(&self) -> &super::BasicTypes::Key {
        self.key.as_ref().unwrap_or_else(|| super::BasicTypes::Key::default_instance())
    }
}

impl ::protobuf::Message for GetByKeyQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetByKeyQuery {
        GetByKeyQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::QueryHeader::QueryHeader>>(
                    "header",
                    |m: &GetByKeyQuery| { &m.header },
                    |m: &mut GetByKeyQuery| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::Key>>(
                    "key",
                    |m: &GetByKeyQuery| { &m.key },
                    |m: &mut GetByKeyQuery| { &mut m.key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetByKeyQuery>(
                    "GetByKeyQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetByKeyQuery {
        static mut instance: ::protobuf::lazy::Lazy<GetByKeyQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetByKeyQuery,
        };
        unsafe {
            instance.get(GetByKeyQuery::new)
        }
    }
}

impl ::protobuf::Clear for GetByKeyQuery {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetByKeyQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetByKeyQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntityID {
    // message oneof groups
    pub entity: ::std::option::Option<EntityID_oneof_entity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum EntityID_oneof_entity {
    accountID(super::BasicTypes::AccountID),
    claim(super::CryptoAddClaim::Claim),
    fileID(super::BasicTypes::FileID),
    contractID(super::BasicTypes::ContractID),
}

impl EntityID {
    pub fn new() -> EntityID {
        ::std::default::Default::default()
    }

    // .proto.AccountID accountID = 1;

    pub fn clear_accountID(&mut self) {
        self.entity = ::std::option::Option::None;
    }

    pub fn has_accountID(&self) -> bool {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::accountID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_accountID(&mut self, v: super::BasicTypes::AccountID) {
        self.entity = ::std::option::Option::Some(EntityID_oneof_entity::accountID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_accountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if let ::std::option::Option::Some(EntityID_oneof_entity::accountID(_)) = self.entity {
        } else {
            self.entity = ::std::option::Option::Some(EntityID_oneof_entity::accountID(super::BasicTypes::AccountID::new()));
        }
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::accountID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_accountID(&mut self) -> super::BasicTypes::AccountID {
        if self.has_accountID() {
            match self.entity.take() {
                ::std::option::Option::Some(EntityID_oneof_entity::accountID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BasicTypes::AccountID::new()
        }
    }

    pub fn get_accountID(&self) -> &super::BasicTypes::AccountID {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::accountID(ref v)) => v,
            _ => super::BasicTypes::AccountID::default_instance(),
        }
    }

    // .proto.Claim claim = 2;

    pub fn clear_claim(&mut self) {
        self.entity = ::std::option::Option::None;
    }

    pub fn has_claim(&self) -> bool {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::claim(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_claim(&mut self, v: super::CryptoAddClaim::Claim) {
        self.entity = ::std::option::Option::Some(EntityID_oneof_entity::claim(v))
    }

    // Mutable pointer to the field.
    pub fn mut_claim(&mut self) -> &mut super::CryptoAddClaim::Claim {
        if let ::std::option::Option::Some(EntityID_oneof_entity::claim(_)) = self.entity {
        } else {
            self.entity = ::std::option::Option::Some(EntityID_oneof_entity::claim(super::CryptoAddClaim::Claim::new()));
        }
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::claim(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_claim(&mut self) -> super::CryptoAddClaim::Claim {
        if self.has_claim() {
            match self.entity.take() {
                ::std::option::Option::Some(EntityID_oneof_entity::claim(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoAddClaim::Claim::new()
        }
    }

    pub fn get_claim(&self) -> &super::CryptoAddClaim::Claim {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::claim(ref v)) => v,
            _ => super::CryptoAddClaim::Claim::default_instance(),
        }
    }

    // .proto.FileID fileID = 3;

    pub fn clear_fileID(&mut self) {
        self.entity = ::std::option::Option::None;
    }

    pub fn has_fileID(&self) -> bool {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::fileID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fileID(&mut self, v: super::BasicTypes::FileID) {
        self.entity = ::std::option::Option::Some(EntityID_oneof_entity::fileID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fileID(&mut self) -> &mut super::BasicTypes::FileID {
        if let ::std::option::Option::Some(EntityID_oneof_entity::fileID(_)) = self.entity {
        } else {
            self.entity = ::std::option::Option::Some(EntityID_oneof_entity::fileID(super::BasicTypes::FileID::new()));
        }
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::fileID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fileID(&mut self) -> super::BasicTypes::FileID {
        if self.has_fileID() {
            match self.entity.take() {
                ::std::option::Option::Some(EntityID_oneof_entity::fileID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BasicTypes::FileID::new()
        }
    }

    pub fn get_fileID(&self) -> &super::BasicTypes::FileID {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::fileID(ref v)) => v,
            _ => super::BasicTypes::FileID::default_instance(),
        }
    }

    // .proto.ContractID contractID = 4;

    pub fn clear_contractID(&mut self) {
        self.entity = ::std::option::Option::None;
    }

    pub fn has_contractID(&self) -> bool {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::contractID(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractID(&mut self, v: super::BasicTypes::ContractID) {
        self.entity = ::std::option::Option::Some(EntityID_oneof_entity::contractID(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractID(&mut self) -> &mut super::BasicTypes::ContractID {
        if let ::std::option::Option::Some(EntityID_oneof_entity::contractID(_)) = self.entity {
        } else {
            self.entity = ::std::option::Option::Some(EntityID_oneof_entity::contractID(super::BasicTypes::ContractID::new()));
        }
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::contractID(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractID(&mut self) -> super::BasicTypes::ContractID {
        if self.has_contractID() {
            match self.entity.take() {
                ::std::option::Option::Some(EntityID_oneof_entity::contractID(v)) => v,
                _ => panic!(),
            }
        } else {
            super::BasicTypes::ContractID::new()
        }
    }

    pub fn get_contractID(&self) -> &super::BasicTypes::ContractID {
        match self.entity {
            ::std::option::Option::Some(EntityID_oneof_entity::contractID(ref v)) => v,
            _ => super::BasicTypes::ContractID::default_instance(),
        }
    }
}

impl ::protobuf::Message for EntityID {
    fn is_initialized(&self) -> bool {
        if let Some(EntityID_oneof_entity::accountID(ref v)) = self.entity {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityID_oneof_entity::claim(ref v)) = self.entity {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityID_oneof_entity::fileID(ref v)) = self.entity {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityID_oneof_entity::contractID(ref v)) = self.entity {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entity = ::std::option::Option::Some(EntityID_oneof_entity::accountID(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entity = ::std::option::Option::Some(EntityID_oneof_entity::claim(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entity = ::std::option::Option::Some(EntityID_oneof_entity::fileID(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entity = ::std::option::Option::Some(EntityID_oneof_entity::contractID(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.entity {
            match v {
                &EntityID_oneof_entity::accountID(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityID_oneof_entity::claim(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityID_oneof_entity::fileID(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityID_oneof_entity::contractID(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.entity {
            match v {
                &EntityID_oneof_entity::accountID(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityID_oneof_entity::claim(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityID_oneof_entity::fileID(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityID_oneof_entity::contractID(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityID {
        EntityID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::BasicTypes::AccountID>(
                    "accountID",
                    EntityID::has_accountID,
                    EntityID::get_accountID,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoAddClaim::Claim>(
                    "claim",
                    EntityID::has_claim,
                    EntityID::get_claim,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::BasicTypes::FileID>(
                    "fileID",
                    EntityID::has_fileID,
                    EntityID::get_fileID,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::BasicTypes::ContractID>(
                    "contractID",
                    EntityID::has_contractID,
                    EntityID::get_contractID,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntityID>(
                    "EntityID",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntityID {
        static mut instance: ::protobuf::lazy::Lazy<EntityID> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntityID,
        };
        unsafe {
            instance.get(EntityID::new)
        }
    }
}

impl ::protobuf::Clear for EntityID {
    fn clear(&mut self) {
        self.clear_accountID();
        self.clear_claim();
        self.clear_fileID();
        self.clear_contractID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityID {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetByKeyResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::ResponseHeader::ResponseHeader>,
    pub entities: ::protobuf::RepeatedField<EntityID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetByKeyResponse {
    pub fn new() -> GetByKeyResponse {
        ::std::default::Default::default()
    }

    // .proto.ResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::ResponseHeader::ResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::ResponseHeader::ResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::ResponseHeader::ResponseHeader {
        self.header.take().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::new())
    }

    pub fn get_header(&self) -> &super::ResponseHeader::ResponseHeader {
        self.header.as_ref().unwrap_or_else(|| super::ResponseHeader::ResponseHeader::default_instance())
    }

    // repeated .proto.EntityID entities = 2;

    pub fn clear_entities(&mut self) {
        self.entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_entities(&mut self, v: ::protobuf::RepeatedField<EntityID>) {
        self.entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entities(&mut self) -> &mut ::protobuf::RepeatedField<EntityID> {
        &mut self.entities
    }

    // Take field
    pub fn take_entities(&mut self) -> ::protobuf::RepeatedField<EntityID> {
        ::std::mem::replace(&mut self.entities, ::protobuf::RepeatedField::new())
    }

    pub fn get_entities(&self) -> &[EntityID] {
        &self.entities
    }
}

impl ::protobuf::Message for GetByKeyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.entities {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetByKeyResponse {
        GetByKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ResponseHeader::ResponseHeader>>(
                    "header",
                    |m: &GetByKeyResponse| { &m.header },
                    |m: &mut GetByKeyResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityID>>(
                    "entities",
                    |m: &GetByKeyResponse| { &m.entities },
                    |m: &mut GetByKeyResponse| { &mut m.entities },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetByKeyResponse>(
                    "GetByKeyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetByKeyResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetByKeyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetByKeyResponse,
        };
        unsafe {
            instance.get(GetByKeyResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetByKeyResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_entities();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetByKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetByKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eGetByKey.proto\x12\x05proto\x1a\x10BasicTypes.proto\x1a\x11QueryHe\
    ader.proto\x1a\x14ResponseHeader.proto\x1a\x14CryptoAddClaim.proto\"Y\n\
    \rGetByKeyQuery\x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.proto.QueryHe\
    aderR\x06header\x12\x1c\n\x03key\x18\x02\x20\x01(\x0b2\n.proto.KeyR\x03k\
    ey\"\xca\x01\n\x08EntityID\x120\n\taccountID\x18\x01\x20\x01(\x0b2\x10.p\
    roto.AccountIDH\0R\taccountID\x12$\n\x05claim\x18\x02\x20\x01(\x0b2\x0c.\
    proto.ClaimH\0R\x05claim\x12'\n\x06fileID\x18\x03\x20\x01(\x0b2\r.proto.\
    FileIDH\0R\x06fileID\x123\n\ncontractID\x18\x04\x20\x01(\x0b2\x11.proto.\
    ContractIDH\0R\ncontractIDB\x08\n\x06entity\"n\n\x10GetByKeyResponse\x12\
    -\n\x06header\x18\x01\x20\x01(\x0b2\x15.proto.ResponseHeaderR\x06header\
    \x12+\n\x08entities\x18\x02\x20\x03(\x0b2\x0f.proto.EntityIDR\x08entitie\
    sB&\n\"com.hederahashgraph.api.proto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
