// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ResponseHeader {
    // message fields
    pub nodeTransactionPrecheckCode: super::ResponseCode::ResponseCodeEnum,
    pub responseType: super::QueryHeader::ResponseType,
    pub cost: u64,
    pub stateProof: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ResponseHeader {
    pub fn new() -> ResponseHeader {
        ::std::default::Default::default()
    }

    // .proto.ResponseCodeEnum nodeTransactionPrecheckCode = 1;

    pub fn clear_nodeTransactionPrecheckCode(&mut self) {
        self.nodeTransactionPrecheckCode = super::ResponseCode::ResponseCodeEnum::OK;
    }

    // Param is passed by value, moved
    pub fn set_nodeTransactionPrecheckCode(&mut self, v: super::ResponseCode::ResponseCodeEnum) {
        self.nodeTransactionPrecheckCode = v;
    }

    pub fn get_nodeTransactionPrecheckCode(&self) -> super::ResponseCode::ResponseCodeEnum {
        self.nodeTransactionPrecheckCode
    }

    // .proto.ResponseType responseType = 2;

    pub fn clear_responseType(&mut self) {
        self.responseType = super::QueryHeader::ResponseType::ANSWER_ONLY;
    }

    // Param is passed by value, moved
    pub fn set_responseType(&mut self, v: super::QueryHeader::ResponseType) {
        self.responseType = v;
    }

    pub fn get_responseType(&self) -> super::QueryHeader::ResponseType {
        self.responseType
    }

    // uint64 cost = 3;

    pub fn clear_cost(&mut self) {
        self.cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost(&mut self, v: u64) {
        self.cost = v;
    }

    pub fn get_cost(&self) -> u64 {
        self.cost
    }

    // bytes stateProof = 4;

    pub fn clear_stateProof(&mut self) {
        self.stateProof.clear();
    }

    // Param is passed by value, moved
    pub fn set_stateProof(&mut self, v: ::std::vec::Vec<u8>) {
        self.stateProof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stateProof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.stateProof
    }

    // Take field
    pub fn take_stateProof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.stateProof, ::std::vec::Vec::new())
    }

    pub fn get_stateProof(&self) -> &[u8] {
        &self.stateProof
    }
}

impl ::protobuf::Message for ResponseHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.nodeTransactionPrecheckCode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.responseType, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cost = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.stateProof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nodeTransactionPrecheckCode != super::ResponseCode::ResponseCodeEnum::OK {
            my_size += ::protobuf::rt::enum_size(1, self.nodeTransactionPrecheckCode);
        }
        if self.responseType != super::QueryHeader::ResponseType::ANSWER_ONLY {
            my_size += ::protobuf::rt::enum_size(2, self.responseType);
        }
        if self.cost != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.stateProof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.stateProof);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nodeTransactionPrecheckCode != super::ResponseCode::ResponseCodeEnum::OK {
            os.write_enum(1, self.nodeTransactionPrecheckCode.value())?;
        }
        if self.responseType != super::QueryHeader::ResponseType::ANSWER_ONLY {
            os.write_enum(2, self.responseType.value())?;
        }
        if self.cost != 0 {
            os.write_uint64(3, self.cost)?;
        }
        if !self.stateProof.is_empty() {
            os.write_bytes(4, &self.stateProof)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseHeader {
        ResponseHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::ResponseCode::ResponseCodeEnum>>(
                    "nodeTransactionPrecheckCode",
                    |m: &ResponseHeader| { &m.nodeTransactionPrecheckCode },
                    |m: &mut ResponseHeader| { &mut m.nodeTransactionPrecheckCode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::QueryHeader::ResponseType>>(
                    "responseType",
                    |m: &ResponseHeader| { &m.responseType },
                    |m: &mut ResponseHeader| { &mut m.responseType },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "cost",
                    |m: &ResponseHeader| { &m.cost },
                    |m: &mut ResponseHeader| { &mut m.cost },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "stateProof",
                    |m: &ResponseHeader| { &m.stateProof },
                    |m: &mut ResponseHeader| { &mut m.stateProof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseHeader>(
                    "ResponseHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseHeader {
        static mut instance: ::protobuf::lazy::Lazy<ResponseHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseHeader,
        };
        unsafe {
            instance.get(ResponseHeader::new)
        }
    }
}

impl ::protobuf::Clear for ResponseHeader {
    fn clear(&mut self) {
        self.clear_nodeTransactionPrecheckCode();
        self.clear_responseType();
        self.clear_cost();
        self.clear_stateProof();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ResponseHeader.proto\x12\x05proto\x1a\x19TransactionResponse.proto\
    \x1a\x11QueryHeader.proto\x1a\x12ResponseCode.proto\"\xd8\x01\n\x0eRespo\
    nseHeader\x12Y\n\x1bnodeTransactionPrecheckCode\x18\x01\x20\x01(\x0e2\
    \x17.proto.ResponseCodeEnumR\x1bnodeTransactionPrecheckCode\x127\n\x0cre\
    sponseType\x18\x02\x20\x01(\x0e2\x13.proto.ResponseTypeR\x0cresponseType\
    \x12\x12\n\x04cost\x18\x03\x20\x01(\x04R\x04cost\x12\x1e\n\nstateProof\
    \x18\x04\x20\x01(\x0cR\nstateProofB&\n\"com.hederahashgraph.api.proto.ja\
    vaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
