// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionBody {
    // message fields
    pub transactionID: ::protobuf::SingularPtrField<super::BasicTypes::TransactionID>,
    pub nodeAccountID: ::protobuf::SingularPtrField<super::BasicTypes::AccountID>,
    pub transactionFee: u64,
    pub transactionValidDuration: ::protobuf::SingularPtrField<super::Duration::Duration>,
    pub generateRecord: bool,
    pub memo: ::std::string::String,
    // message oneof groups
    pub data: ::std::option::Option<TransactionBody_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum TransactionBody_oneof_data {
    adminDelete(super::AdminDelete::AdminDeleteTransactionBody),
    adminUndelete(super::AdminUndelete::AdminUndeleteTransactionBody),
    contractCall(super::ContractCall::ContractCallTransactionBody),
    contractCreateInstance(super::ContractCreate::ContractCreateTransactionBody),
    contractUpdateInstance(super::ContractUpdate::ContractUpdateTransactionBody),
    cryptoAddClaim(super::CryptoAddClaim::CryptoAddClaimTransactionBody),
    cryptoCreateAccount(super::CryptoCreate::CryptoCreateTransactionBody),
    cryptoDelete(super::CryptoDelete::CryptoDeleteTransactionBody),
    cryptoDeleteClaim(super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody),
    cryptoTransfer(super::CryptoTransfer::CryptoTransferTransactionBody),
    cryptoUpdateAccount(super::CryptoUpdate::CryptoUpdateTransactionBody),
    fileAppend(super::FileAppend::FileAppendTransactionBody),
    fileCreate(super::FileCreate::FileCreateTransactionBody),
    fileDelete(super::FileDelete::FileDeleteTransactionBody),
    fileUpdate(super::FileUpdate::FileUpdateTransactionBody),
}

impl TransactionBody {
    pub fn new() -> TransactionBody {
        ::std::default::Default::default()
    }

    // .proto.TransactionID transactionID = 1;

    pub fn clear_transactionID(&mut self) {
        self.transactionID.clear();
    }

    pub fn has_transactionID(&self) -> bool {
        self.transactionID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transactionID(&mut self, v: super::BasicTypes::TransactionID) {
        self.transactionID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionID(&mut self) -> &mut super::BasicTypes::TransactionID {
        if self.transactionID.is_none() {
            self.transactionID.set_default();
        }
        self.transactionID.as_mut().unwrap()
    }

    // Take field
    pub fn take_transactionID(&mut self) -> super::BasicTypes::TransactionID {
        self.transactionID.take().unwrap_or_else(|| super::BasicTypes::TransactionID::new())
    }

    pub fn get_transactionID(&self) -> &super::BasicTypes::TransactionID {
        self.transactionID.as_ref().unwrap_or_else(|| super::BasicTypes::TransactionID::default_instance())
    }

    // .proto.AccountID nodeAccountID = 2;

    pub fn clear_nodeAccountID(&mut self) {
        self.nodeAccountID.clear();
    }

    pub fn has_nodeAccountID(&self) -> bool {
        self.nodeAccountID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeAccountID(&mut self, v: super::BasicTypes::AccountID) {
        self.nodeAccountID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeAccountID(&mut self) -> &mut super::BasicTypes::AccountID {
        if self.nodeAccountID.is_none() {
            self.nodeAccountID.set_default();
        }
        self.nodeAccountID.as_mut().unwrap()
    }

    // Take field
    pub fn take_nodeAccountID(&mut self) -> super::BasicTypes::AccountID {
        self.nodeAccountID.take().unwrap_or_else(|| super::BasicTypes::AccountID::new())
    }

    pub fn get_nodeAccountID(&self) -> &super::BasicTypes::AccountID {
        self.nodeAccountID.as_ref().unwrap_or_else(|| super::BasicTypes::AccountID::default_instance())
    }

    // uint64 transactionFee = 3;

    pub fn clear_transactionFee(&mut self) {
        self.transactionFee = 0;
    }

    // Param is passed by value, moved
    pub fn set_transactionFee(&mut self, v: u64) {
        self.transactionFee = v;
    }

    pub fn get_transactionFee(&self) -> u64 {
        self.transactionFee
    }

    // .proto.Duration transactionValidDuration = 4;

    pub fn clear_transactionValidDuration(&mut self) {
        self.transactionValidDuration.clear();
    }

    pub fn has_transactionValidDuration(&self) -> bool {
        self.transactionValidDuration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transactionValidDuration(&mut self, v: super::Duration::Duration) {
        self.transactionValidDuration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionValidDuration(&mut self) -> &mut super::Duration::Duration {
        if self.transactionValidDuration.is_none() {
            self.transactionValidDuration.set_default();
        }
        self.transactionValidDuration.as_mut().unwrap()
    }

    // Take field
    pub fn take_transactionValidDuration(&mut self) -> super::Duration::Duration {
        self.transactionValidDuration.take().unwrap_or_else(|| super::Duration::Duration::new())
    }

    pub fn get_transactionValidDuration(&self) -> &super::Duration::Duration {
        self.transactionValidDuration.as_ref().unwrap_or_else(|| super::Duration::Duration::default_instance())
    }

    // bool generateRecord = 5;

    pub fn clear_generateRecord(&mut self) {
        self.generateRecord = false;
    }

    // Param is passed by value, moved
    pub fn set_generateRecord(&mut self, v: bool) {
        self.generateRecord = v;
    }

    pub fn get_generateRecord(&self) -> bool {
        self.generateRecord
    }

    // string memo = 6;

    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }

    pub fn get_memo(&self) -> &str {
        &self.memo
    }

    // .proto.AdminDeleteTransactionBody adminDelete = 20;

    pub fn clear_adminDelete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_adminDelete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_adminDelete(&mut self, v: super::AdminDelete::AdminDeleteTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_adminDelete(&mut self) -> &mut super::AdminDelete::AdminDeleteTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(super::AdminDelete::AdminDeleteTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_adminDelete(&mut self) -> super::AdminDelete::AdminDeleteTransactionBody {
        if self.has_adminDelete() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AdminDelete::AdminDeleteTransactionBody::new()
        }
    }

    pub fn get_adminDelete(&self) -> &super::AdminDelete::AdminDeleteTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(ref v)) => v,
            _ => super::AdminDelete::AdminDeleteTransactionBody::default_instance(),
        }
    }

    // .proto.AdminUndeleteTransactionBody adminUndelete = 21;

    pub fn clear_adminUndelete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_adminUndelete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_adminUndelete(&mut self, v: super::AdminUndelete::AdminUndeleteTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_adminUndelete(&mut self) -> &mut super::AdminUndelete::AdminUndeleteTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(super::AdminUndelete::AdminUndeleteTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_adminUndelete(&mut self) -> super::AdminUndelete::AdminUndeleteTransactionBody {
        if self.has_adminUndelete() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::AdminUndelete::AdminUndeleteTransactionBody::new()
        }
    }

    pub fn get_adminUndelete(&self) -> &super::AdminUndelete::AdminUndeleteTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(ref v)) => v,
            _ => super::AdminUndelete::AdminUndeleteTransactionBody::default_instance(),
        }
    }

    // .proto.ContractCallTransactionBody contractCall = 7;

    pub fn clear_contractCall(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_contractCall(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractCall(&mut self, v: super::ContractCall::ContractCallTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractCall(&mut self) -> &mut super::ContractCall::ContractCallTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(super::ContractCall::ContractCallTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractCall(&mut self) -> super::ContractCall::ContractCallTransactionBody {
        if self.has_contractCall() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ContractCall::ContractCallTransactionBody::new()
        }
    }

    pub fn get_contractCall(&self) -> &super::ContractCall::ContractCallTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(ref v)) => v,
            _ => super::ContractCall::ContractCallTransactionBody::default_instance(),
        }
    }

    // .proto.ContractCreateTransactionBody contractCreateInstance = 8;

    pub fn clear_contractCreateInstance(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_contractCreateInstance(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractCreateInstance(&mut self, v: super::ContractCreate::ContractCreateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractCreateInstance(&mut self) -> &mut super::ContractCreate::ContractCreateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(super::ContractCreate::ContractCreateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractCreateInstance(&mut self) -> super::ContractCreate::ContractCreateTransactionBody {
        if self.has_contractCreateInstance() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ContractCreate::ContractCreateTransactionBody::new()
        }
    }

    pub fn get_contractCreateInstance(&self) -> &super::ContractCreate::ContractCreateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(ref v)) => v,
            _ => super::ContractCreate::ContractCreateTransactionBody::default_instance(),
        }
    }

    // .proto.ContractUpdateTransactionBody contractUpdateInstance = 9;

    pub fn clear_contractUpdateInstance(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_contractUpdateInstance(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractUpdateInstance(&mut self, v: super::ContractUpdate::ContractUpdateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractUpdateInstance(&mut self) -> &mut super::ContractUpdate::ContractUpdateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(super::ContractUpdate::ContractUpdateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractUpdateInstance(&mut self) -> super::ContractUpdate::ContractUpdateTransactionBody {
        if self.has_contractUpdateInstance() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ContractUpdate::ContractUpdateTransactionBody::new()
        }
    }

    pub fn get_contractUpdateInstance(&self) -> &super::ContractUpdate::ContractUpdateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(ref v)) => v,
            _ => super::ContractUpdate::ContractUpdateTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoAddClaimTransactionBody cryptoAddClaim = 10;

    pub fn clear_cryptoAddClaim(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoAddClaim(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoAddClaim(&mut self, v: super::CryptoAddClaim::CryptoAddClaimTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoAddClaim(&mut self) -> &mut super::CryptoAddClaim::CryptoAddClaimTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(super::CryptoAddClaim::CryptoAddClaimTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoAddClaim(&mut self) -> super::CryptoAddClaim::CryptoAddClaimTransactionBody {
        if self.has_cryptoAddClaim() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoAddClaim::CryptoAddClaimTransactionBody::new()
        }
    }

    pub fn get_cryptoAddClaim(&self) -> &super::CryptoAddClaim::CryptoAddClaimTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(ref v)) => v,
            _ => super::CryptoAddClaim::CryptoAddClaimTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoCreateTransactionBody cryptoCreateAccount = 11;

    pub fn clear_cryptoCreateAccount(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoCreateAccount(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoCreateAccount(&mut self, v: super::CryptoCreate::CryptoCreateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoCreateAccount(&mut self) -> &mut super::CryptoCreate::CryptoCreateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(super::CryptoCreate::CryptoCreateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoCreateAccount(&mut self) -> super::CryptoCreate::CryptoCreateTransactionBody {
        if self.has_cryptoCreateAccount() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoCreate::CryptoCreateTransactionBody::new()
        }
    }

    pub fn get_cryptoCreateAccount(&self) -> &super::CryptoCreate::CryptoCreateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(ref v)) => v,
            _ => super::CryptoCreate::CryptoCreateTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoDeleteTransactionBody cryptoDelete = 12;

    pub fn clear_cryptoDelete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoDelete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoDelete(&mut self, v: super::CryptoDelete::CryptoDeleteTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoDelete(&mut self) -> &mut super::CryptoDelete::CryptoDeleteTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(super::CryptoDelete::CryptoDeleteTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoDelete(&mut self) -> super::CryptoDelete::CryptoDeleteTransactionBody {
        if self.has_cryptoDelete() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoDelete::CryptoDeleteTransactionBody::new()
        }
    }

    pub fn get_cryptoDelete(&self) -> &super::CryptoDelete::CryptoDeleteTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(ref v)) => v,
            _ => super::CryptoDelete::CryptoDeleteTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoDeleteClaimTransactionBody cryptoDeleteClaim = 13;

    pub fn clear_cryptoDeleteClaim(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoDeleteClaim(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoDeleteClaim(&mut self, v: super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoDeleteClaim(&mut self) -> &mut super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoDeleteClaim(&mut self) -> super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody {
        if self.has_cryptoDeleteClaim() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody::new()
        }
    }

    pub fn get_cryptoDeleteClaim(&self) -> &super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(ref v)) => v,
            _ => super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoTransferTransactionBody cryptoTransfer = 14;

    pub fn clear_cryptoTransfer(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoTransfer(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoTransfer(&mut self, v: super::CryptoTransfer::CryptoTransferTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoTransfer(&mut self) -> &mut super::CryptoTransfer::CryptoTransferTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(super::CryptoTransfer::CryptoTransferTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoTransfer(&mut self) -> super::CryptoTransfer::CryptoTransferTransactionBody {
        if self.has_cryptoTransfer() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoTransfer::CryptoTransferTransactionBody::new()
        }
    }

    pub fn get_cryptoTransfer(&self) -> &super::CryptoTransfer::CryptoTransferTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(ref v)) => v,
            _ => super::CryptoTransfer::CryptoTransferTransactionBody::default_instance(),
        }
    }

    // .proto.CryptoUpdateTransactionBody cryptoUpdateAccount = 15;

    pub fn clear_cryptoUpdateAccount(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_cryptoUpdateAccount(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptoUpdateAccount(&mut self, v: super::CryptoUpdate::CryptoUpdateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptoUpdateAccount(&mut self) -> &mut super::CryptoUpdate::CryptoUpdateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(super::CryptoUpdate::CryptoUpdateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptoUpdateAccount(&mut self) -> super::CryptoUpdate::CryptoUpdateTransactionBody {
        if self.has_cryptoUpdateAccount() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoUpdate::CryptoUpdateTransactionBody::new()
        }
    }

    pub fn get_cryptoUpdateAccount(&self) -> &super::CryptoUpdate::CryptoUpdateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(ref v)) => v,
            _ => super::CryptoUpdate::CryptoUpdateTransactionBody::default_instance(),
        }
    }

    // .proto.FileAppendTransactionBody fileAppend = 16;

    pub fn clear_fileAppend(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_fileAppend(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fileAppend(&mut self, v: super::FileAppend::FileAppendTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fileAppend(&mut self) -> &mut super::FileAppend::FileAppendTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(super::FileAppend::FileAppendTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fileAppend(&mut self) -> super::FileAppend::FileAppendTransactionBody {
        if self.has_fileAppend() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FileAppend::FileAppendTransactionBody::new()
        }
    }

    pub fn get_fileAppend(&self) -> &super::FileAppend::FileAppendTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(ref v)) => v,
            _ => super::FileAppend::FileAppendTransactionBody::default_instance(),
        }
    }

    // .proto.FileCreateTransactionBody fileCreate = 17;

    pub fn clear_fileCreate(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_fileCreate(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fileCreate(&mut self, v: super::FileCreate::FileCreateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fileCreate(&mut self) -> &mut super::FileCreate::FileCreateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(super::FileCreate::FileCreateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fileCreate(&mut self) -> super::FileCreate::FileCreateTransactionBody {
        if self.has_fileCreate() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FileCreate::FileCreateTransactionBody::new()
        }
    }

    pub fn get_fileCreate(&self) -> &super::FileCreate::FileCreateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(ref v)) => v,
            _ => super::FileCreate::FileCreateTransactionBody::default_instance(),
        }
    }

    // .proto.FileDeleteTransactionBody fileDelete = 18;

    pub fn clear_fileDelete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_fileDelete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fileDelete(&mut self, v: super::FileDelete::FileDeleteTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fileDelete(&mut self) -> &mut super::FileDelete::FileDeleteTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(super::FileDelete::FileDeleteTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fileDelete(&mut self) -> super::FileDelete::FileDeleteTransactionBody {
        if self.has_fileDelete() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FileDelete::FileDeleteTransactionBody::new()
        }
    }

    pub fn get_fileDelete(&self) -> &super::FileDelete::FileDeleteTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(ref v)) => v,
            _ => super::FileDelete::FileDeleteTransactionBody::default_instance(),
        }
    }

    // .proto.FileUpdateTransactionBody fileUpdate = 19;

    pub fn clear_fileUpdate(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_fileUpdate(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fileUpdate(&mut self, v: super::FileUpdate::FileUpdateTransactionBody) {
        self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fileUpdate(&mut self) -> &mut super::FileUpdate::FileUpdateTransactionBody {
        if let ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(super::FileUpdate::FileUpdateTransactionBody::new()));
        }
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fileUpdate(&mut self) -> super::FileUpdate::FileUpdateTransactionBody {
        if self.has_fileUpdate() {
            match self.data.take() {
                ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            super::FileUpdate::FileUpdateTransactionBody::new()
        }
    }

    pub fn get_fileUpdate(&self) -> &super::FileUpdate::FileUpdateTransactionBody {
        match self.data {
            ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(ref v)) => v,
            _ => super::FileUpdate::FileUpdateTransactionBody::default_instance(),
        }
    }
}

impl ::protobuf::Message for TransactionBody {
    fn is_initialized(&self) -> bool {
        for v in &self.transactionID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nodeAccountID {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactionValidDuration {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(TransactionBody_oneof_data::adminDelete(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::adminUndelete(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::contractCall(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::contractCreateInstance(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::contractUpdateInstance(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoAddClaim(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoCreateAccount(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoDelete(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoDeleteClaim(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoTransfer(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::cryptoUpdateAccount(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::fileAppend(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::fileCreate(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::fileDelete(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionBody_oneof_data::fileUpdate(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transactionID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nodeAccountID)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.transactionFee = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transactionValidDuration)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.generateRecord = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminDelete(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::adminUndelete(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCall(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractCreateInstance(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::contractUpdateInstance(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoAddClaim(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoCreateAccount(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDelete(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoDeleteClaim(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoTransfer(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::cryptoUpdateAccount(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileAppend(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileCreate(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileDelete(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(TransactionBody_oneof_data::fileUpdate(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transactionID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.nodeAccountID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.transactionFee != 0 {
            my_size += ::protobuf::rt::value_size(3, self.transactionFee, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.transactionValidDuration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.generateRecord != false {
            my_size += 2;
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.memo);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &TransactionBody_oneof_data::adminDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::adminUndelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::contractCall(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::contractCreateInstance(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::contractUpdateInstance(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoAddClaim(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoCreateAccount(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoDeleteClaim(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoTransfer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::cryptoUpdateAccount(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::fileAppend(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::fileCreate(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::fileDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionBody_oneof_data::fileUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transactionID.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.nodeAccountID.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.transactionFee != 0 {
            os.write_uint64(3, self.transactionFee)?;
        }
        if let Some(ref v) = self.transactionValidDuration.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.generateRecord != false {
            os.write_bool(5, self.generateRecord)?;
        }
        if !self.memo.is_empty() {
            os.write_string(6, &self.memo)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &TransactionBody_oneof_data::adminDelete(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::adminUndelete(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::contractCall(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::contractCreateInstance(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::contractUpdateInstance(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoAddClaim(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoCreateAccount(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoDelete(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoDeleteClaim(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoTransfer(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::cryptoUpdateAccount(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::fileAppend(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::fileCreate(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::fileDelete(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionBody_oneof_data::fileUpdate(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionBody {
        TransactionBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::TransactionID>>(
                    "transactionID",
                    |m: &TransactionBody| { &m.transactionID },
                    |m: &mut TransactionBody| { &mut m.transactionID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::AccountID>>(
                    "nodeAccountID",
                    |m: &TransactionBody| { &m.nodeAccountID },
                    |m: &mut TransactionBody| { &mut m.nodeAccountID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "transactionFee",
                    |m: &TransactionBody| { &m.transactionFee },
                    |m: &mut TransactionBody| { &mut m.transactionFee },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Duration::Duration>>(
                    "transactionValidDuration",
                    |m: &TransactionBody| { &m.transactionValidDuration },
                    |m: &mut TransactionBody| { &mut m.transactionValidDuration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "generateRecord",
                    |m: &TransactionBody| { &m.generateRecord },
                    |m: &mut TransactionBody| { &mut m.generateRecord },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "memo",
                    |m: &TransactionBody| { &m.memo },
                    |m: &mut TransactionBody| { &mut m.memo },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::AdminDelete::AdminDeleteTransactionBody>(
                    "adminDelete",
                    TransactionBody::has_adminDelete,
                    TransactionBody::get_adminDelete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::AdminUndelete::AdminUndeleteTransactionBody>(
                    "adminUndelete",
                    TransactionBody::has_adminUndelete,
                    TransactionBody::get_adminUndelete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::ContractCall::ContractCallTransactionBody>(
                    "contractCall",
                    TransactionBody::has_contractCall,
                    TransactionBody::get_contractCall,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::ContractCreate::ContractCreateTransactionBody>(
                    "contractCreateInstance",
                    TransactionBody::has_contractCreateInstance,
                    TransactionBody::get_contractCreateInstance,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::ContractUpdate::ContractUpdateTransactionBody>(
                    "contractUpdateInstance",
                    TransactionBody::has_contractUpdateInstance,
                    TransactionBody::get_contractUpdateInstance,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoAddClaim::CryptoAddClaimTransactionBody>(
                    "cryptoAddClaim",
                    TransactionBody::has_cryptoAddClaim,
                    TransactionBody::get_cryptoAddClaim,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoCreate::CryptoCreateTransactionBody>(
                    "cryptoCreateAccount",
                    TransactionBody::has_cryptoCreateAccount,
                    TransactionBody::get_cryptoCreateAccount,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoDelete::CryptoDeleteTransactionBody>(
                    "cryptoDelete",
                    TransactionBody::has_cryptoDelete,
                    TransactionBody::get_cryptoDelete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoDeleteClaim::CryptoDeleteClaimTransactionBody>(
                    "cryptoDeleteClaim",
                    TransactionBody::has_cryptoDeleteClaim,
                    TransactionBody::get_cryptoDeleteClaim,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoTransfer::CryptoTransferTransactionBody>(
                    "cryptoTransfer",
                    TransactionBody::has_cryptoTransfer,
                    TransactionBody::get_cryptoTransfer,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoUpdate::CryptoUpdateTransactionBody>(
                    "cryptoUpdateAccount",
                    TransactionBody::has_cryptoUpdateAccount,
                    TransactionBody::get_cryptoUpdateAccount,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::FileAppend::FileAppendTransactionBody>(
                    "fileAppend",
                    TransactionBody::has_fileAppend,
                    TransactionBody::get_fileAppend,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::FileCreate::FileCreateTransactionBody>(
                    "fileCreate",
                    TransactionBody::has_fileCreate,
                    TransactionBody::get_fileCreate,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::FileDelete::FileDeleteTransactionBody>(
                    "fileDelete",
                    TransactionBody::has_fileDelete,
                    TransactionBody::get_fileDelete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::FileUpdate::FileUpdateTransactionBody>(
                    "fileUpdate",
                    TransactionBody::has_fileUpdate,
                    TransactionBody::get_fileUpdate,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionBody>(
                    "TransactionBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionBody {
        static mut instance: ::protobuf::lazy::Lazy<TransactionBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionBody,
        };
        unsafe {
            instance.get(TransactionBody::new)
        }
    }
}

impl ::protobuf::Clear for TransactionBody {
    fn clear(&mut self) {
        self.clear_transactionID();
        self.clear_nodeAccountID();
        self.clear_transactionFee();
        self.clear_transactionValidDuration();
        self.clear_generateRecord();
        self.clear_memo();
        self.clear_adminDelete();
        self.clear_adminUndelete();
        self.clear_contractCall();
        self.clear_contractCreateInstance();
        self.clear_contractUpdateInstance();
        self.clear_cryptoAddClaim();
        self.clear_cryptoCreateAccount();
        self.clear_cryptoDelete();
        self.clear_cryptoDeleteClaim();
        self.clear_cryptoTransfer();
        self.clear_cryptoUpdateAccount();
        self.clear_fileAppend();
        self.clear_fileCreate();
        self.clear_fileDelete();
        self.clear_fileUpdate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub body: ::protobuf::SingularPtrField<TransactionBody>,
    pub sigs: ::protobuf::SingularPtrField<super::BasicTypes::SignatureList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // .proto.TransactionBody body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: TransactionBody) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut TransactionBody {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> TransactionBody {
        self.body.take().unwrap_or_else(|| TransactionBody::new())
    }

    pub fn get_body(&self) -> &TransactionBody {
        self.body.as_ref().unwrap_or_else(|| TransactionBody::default_instance())
    }

    // .proto.SignatureList sigs = 2;

    pub fn clear_sigs(&mut self) {
        self.sigs.clear();
    }

    pub fn has_sigs(&self) -> bool {
        self.sigs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sigs(&mut self, v: super::BasicTypes::SignatureList) {
        self.sigs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sigs(&mut self) -> &mut super::BasicTypes::SignatureList {
        if self.sigs.is_none() {
            self.sigs.set_default();
        }
        self.sigs.as_mut().unwrap()
    }

    // Take field
    pub fn take_sigs(&mut self) -> super::BasicTypes::SignatureList {
        self.sigs.take().unwrap_or_else(|| super::BasicTypes::SignatureList::new())
    }

    pub fn get_sigs(&self) -> &super::BasicTypes::SignatureList {
        self.sigs.as_ref().unwrap_or_else(|| super::BasicTypes::SignatureList::default_instance())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sigs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sigs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sigs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sigs.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionBody>>(
                    "body",
                    |m: &Transaction| { &m.body },
                    |m: &mut Transaction| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::SignatureList>>(
                    "sigs",
                    |m: &Transaction| { &m.sigs },
                    |m: &mut Transaction| { &mut m.sigs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Transaction>(
                    "Transaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Transaction {
        static mut instance: ::protobuf::lazy::Lazy<Transaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Transaction,
        };
        unsafe {
            instance.get(Transaction::new)
        }
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_sigs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11Transaction.proto\x12\x05proto\x1a\x11AdminDelete.proto\x1a\x13Adm\
    inUndelete.proto\x1a\x12ContractCall.proto\x1a\x14ContractCreate.proto\
    \x1a\x14ContractUpdate.proto\x1a\x14CryptoAddClaim.proto\x1a\x12CryptoCr\
    eate.proto\x1a\x12CryptoDelete.proto\x1a\x17CryptoDeleteClaim.proto\x1a\
    \x14CryptoTransfer.proto\x1a\x12CryptoUpdate.proto\x1a\x10FileAppend.pro\
    to\x1a\x10FileCreate.proto\x1a\x10FileDelete.proto\x1a\x10FileUpdate.pro\
    to\x1a\x0eDuration.proto\x1a\x10BasicTypes.proto\"\xdf\x0b\n\x0fTransact\
    ionBody\x12:\n\rtransactionID\x18\x01\x20\x01(\x0b2\x14.proto.Transactio\
    nIDR\rtransactionID\x126\n\rnodeAccountID\x18\x02\x20\x01(\x0b2\x10.prot\
    o.AccountIDR\rnodeAccountID\x12&\n\x0etransactionFee\x18\x03\x20\x01(\
    \x04R\x0etransactionFee\x12K\n\x18transactionValidDuration\x18\x04\x20\
    \x01(\x0b2\x0f.proto.DurationR\x18transactionValidDuration\x12&\n\x0egen\
    erateRecord\x18\x05\x20\x01(\x08R\x0egenerateRecord\x12\x12\n\x04memo\
    \x18\x06\x20\x01(\tR\x04memo\x12E\n\x0badminDelete\x18\x14\x20\x01(\x0b2\
    !.proto.AdminDeleteTransactionBodyH\0R\x0badminDelete\x12K\n\radminUndel\
    ete\x18\x15\x20\x01(\x0b2#.proto.AdminUndeleteTransactionBodyH\0R\radmin\
    Undelete\x12H\n\x0ccontractCall\x18\x07\x20\x01(\x0b2\".proto.ContractCa\
    llTransactionBodyH\0R\x0ccontractCall\x12^\n\x16contractCreateInstance\
    \x18\x08\x20\x01(\x0b2$.proto.ContractCreateTransactionBodyH\0R\x16contr\
    actCreateInstance\x12^\n\x16contractUpdateInstance\x18\t\x20\x01(\x0b2$.\
    proto.ContractUpdateTransactionBodyH\0R\x16contractUpdateInstance\x12N\n\
    \x0ecryptoAddClaim\x18\n\x20\x01(\x0b2$.proto.CryptoAddClaimTransactionB\
    odyH\0R\x0ecryptoAddClaim\x12V\n\x13cryptoCreateAccount\x18\x0b\x20\x01(\
    \x0b2\".proto.CryptoCreateTransactionBodyH\0R\x13cryptoCreateAccount\x12\
    H\n\x0ccryptoDelete\x18\x0c\x20\x01(\x0b2\".proto.CryptoDeleteTransactio\
    nBodyH\0R\x0ccryptoDelete\x12W\n\x11cryptoDeleteClaim\x18\r\x20\x01(\x0b\
    2'.proto.CryptoDeleteClaimTransactionBodyH\0R\x11cryptoDeleteClaim\x12N\
    \n\x0ecryptoTransfer\x18\x0e\x20\x01(\x0b2$.proto.CryptoTransferTransact\
    ionBodyH\0R\x0ecryptoTransfer\x12V\n\x13cryptoUpdateAccount\x18\x0f\x20\
    \x01(\x0b2\".proto.CryptoUpdateTransactionBodyH\0R\x13cryptoUpdateAccoun\
    t\x12B\n\nfileAppend\x18\x10\x20\x01(\x0b2\x20.proto.FileAppendTransacti\
    onBodyH\0R\nfileAppend\x12B\n\nfileCreate\x18\x11\x20\x01(\x0b2\x20.prot\
    o.FileCreateTransactionBodyH\0R\nfileCreate\x12B\n\nfileDelete\x18\x12\
    \x20\x01(\x0b2\x20.proto.FileDeleteTransactionBodyH\0R\nfileDelete\x12B\
    \n\nfileUpdate\x18\x13\x20\x01(\x0b2\x20.proto.FileUpdateTransactionBody\
    H\0R\nfileUpdateB\x06\n\x04data\"c\n\x0bTransaction\x12*\n\x04body\x18\
    \x01\x20\x01(\x0b2\x16.proto.TransactionBodyR\x04body\x12(\n\x04sigs\x18\
    \x02\x20\x01(\x0b2\x14.proto.SignatureListR\x04sigsB&\n\"com.hederahashg\
    raph.api.proto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
