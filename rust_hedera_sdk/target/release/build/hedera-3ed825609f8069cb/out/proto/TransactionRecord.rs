// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionRecord {
    // message fields
    pub receipt: ::protobuf::SingularPtrField<super::TransactionReceipt::TransactionReceipt>,
    pub transactionHash: ::std::vec::Vec<u8>,
    pub consensusTimestamp: ::protobuf::SingularPtrField<super::Timestamp::Timestamp>,
    pub transactionID: ::protobuf::SingularPtrField<super::BasicTypes::TransactionID>,
    pub memo: ::std::string::String,
    pub transactionFee: u64,
    // message oneof groups
    pub body: ::std::option::Option<TransactionRecord_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum TransactionRecord_oneof_body {
    contractCallResult(super::ContractCallLocal::ContractFunctionResult),
    contractCreateResult(super::ContractCallLocal::ContractFunctionResult),
    transferList(super::CryptoTransfer::TransferList),
}

impl TransactionRecord {
    pub fn new() -> TransactionRecord {
        ::std::default::Default::default()
    }

    // .proto.TransactionReceipt receipt = 1;

    pub fn clear_receipt(&mut self) {
        self.receipt.clear();
    }

    pub fn has_receipt(&self) -> bool {
        self.receipt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receipt(&mut self, v: super::TransactionReceipt::TransactionReceipt) {
        self.receipt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt(&mut self) -> &mut super::TransactionReceipt::TransactionReceipt {
        if self.receipt.is_none() {
            self.receipt.set_default();
        }
        self.receipt.as_mut().unwrap()
    }

    // Take field
    pub fn take_receipt(&mut self) -> super::TransactionReceipt::TransactionReceipt {
        self.receipt.take().unwrap_or_else(|| super::TransactionReceipt::TransactionReceipt::new())
    }

    pub fn get_receipt(&self) -> &super::TransactionReceipt::TransactionReceipt {
        self.receipt.as_ref().unwrap_or_else(|| super::TransactionReceipt::TransactionReceipt::default_instance())
    }

    // bytes transactionHash = 2;

    pub fn clear_transactionHash(&mut self) {
        self.transactionHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactionHash(&mut self, v: ::std::vec::Vec<u8>) {
        self.transactionHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionHash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transactionHash
    }

    // Take field
    pub fn take_transactionHash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transactionHash, ::std::vec::Vec::new())
    }

    pub fn get_transactionHash(&self) -> &[u8] {
        &self.transactionHash
    }

    // .proto.Timestamp consensusTimestamp = 3;

    pub fn clear_consensusTimestamp(&mut self) {
        self.consensusTimestamp.clear();
    }

    pub fn has_consensusTimestamp(&self) -> bool {
        self.consensusTimestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensusTimestamp(&mut self, v: super::Timestamp::Timestamp) {
        self.consensusTimestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensusTimestamp(&mut self) -> &mut super::Timestamp::Timestamp {
        if self.consensusTimestamp.is_none() {
            self.consensusTimestamp.set_default();
        }
        self.consensusTimestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensusTimestamp(&mut self) -> super::Timestamp::Timestamp {
        self.consensusTimestamp.take().unwrap_or_else(|| super::Timestamp::Timestamp::new())
    }

    pub fn get_consensusTimestamp(&self) -> &super::Timestamp::Timestamp {
        self.consensusTimestamp.as_ref().unwrap_or_else(|| super::Timestamp::Timestamp::default_instance())
    }

    // .proto.TransactionID transactionID = 4;

    pub fn clear_transactionID(&mut self) {
        self.transactionID.clear();
    }

    pub fn has_transactionID(&self) -> bool {
        self.transactionID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transactionID(&mut self, v: super::BasicTypes::TransactionID) {
        self.transactionID = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionID(&mut self) -> &mut super::BasicTypes::TransactionID {
        if self.transactionID.is_none() {
            self.transactionID.set_default();
        }
        self.transactionID.as_mut().unwrap()
    }

    // Take field
    pub fn take_transactionID(&mut self) -> super::BasicTypes::TransactionID {
        self.transactionID.take().unwrap_or_else(|| super::BasicTypes::TransactionID::new())
    }

    pub fn get_transactionID(&self) -> &super::BasicTypes::TransactionID {
        self.transactionID.as_ref().unwrap_or_else(|| super::BasicTypes::TransactionID::default_instance())
    }

    // string memo = 5;

    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }

    pub fn get_memo(&self) -> &str {
        &self.memo
    }

    // uint64 transactionFee = 6;

    pub fn clear_transactionFee(&mut self) {
        self.transactionFee = 0;
    }

    // Param is passed by value, moved
    pub fn set_transactionFee(&mut self, v: u64) {
        self.transactionFee = v;
    }

    pub fn get_transactionFee(&self) -> u64 {
        self.transactionFee
    }

    // .proto.ContractFunctionResult contractCallResult = 7;

    pub fn clear_contractCallResult(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_contractCallResult(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractCallResult(&mut self, v: super::ContractCallLocal::ContractFunctionResult) {
        self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractCallResult(&mut self) -> &mut super::ContractCallLocal::ContractFunctionResult {
        if let ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(super::ContractCallLocal::ContractFunctionResult::new()));
        }
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractCallResult(&mut self) -> super::ContractCallLocal::ContractFunctionResult {
        if self.has_contractCallResult() {
            match self.body.take() {
                ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ContractCallLocal::ContractFunctionResult::new()
        }
    }

    pub fn get_contractCallResult(&self) -> &super::ContractCallLocal::ContractFunctionResult {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(ref v)) => v,
            _ => super::ContractCallLocal::ContractFunctionResult::default_instance(),
        }
    }

    // .proto.ContractFunctionResult contractCreateResult = 8;

    pub fn clear_contractCreateResult(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_contractCreateResult(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contractCreateResult(&mut self, v: super::ContractCallLocal::ContractFunctionResult) {
        self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contractCreateResult(&mut self) -> &mut super::ContractCallLocal::ContractFunctionResult {
        if let ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(super::ContractCallLocal::ContractFunctionResult::new()));
        }
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contractCreateResult(&mut self) -> super::ContractCallLocal::ContractFunctionResult {
        if self.has_contractCreateResult() {
            match self.body.take() {
                ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(v)) => v,
                _ => panic!(),
            }
        } else {
            super::ContractCallLocal::ContractFunctionResult::new()
        }
    }

    pub fn get_contractCreateResult(&self) -> &super::ContractCallLocal::ContractFunctionResult {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(ref v)) => v,
            _ => super::ContractCallLocal::ContractFunctionResult::default_instance(),
        }
    }

    // .proto.TransferList transferList = 9;

    pub fn clear_transferList(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_transferList(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transferList(&mut self, v: super::CryptoTransfer::TransferList) {
        self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transferList(&mut self) -> &mut super::CryptoTransfer::TransferList {
        if let ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(super::CryptoTransfer::TransferList::new()));
        }
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transferList(&mut self) -> super::CryptoTransfer::TransferList {
        if self.has_transferList() {
            match self.body.take() {
                ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::CryptoTransfer::TransferList::new()
        }
    }

    pub fn get_transferList(&self) -> &super::CryptoTransfer::TransferList {
        match self.body {
            ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(ref v)) => v,
            _ => super::CryptoTransfer::TransferList::default_instance(),
        }
    }
}

impl ::protobuf::Message for TransactionRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.receipt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consensusTimestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactionID {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(TransactionRecord_oneof_body::contractCallResult(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionRecord_oneof_body::contractCreateResult(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionRecord_oneof_body::transferList(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receipt)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transactionHash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensusTimestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transactionID)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.transactionFee = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCallResult(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::contractCreateResult(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(TransactionRecord_oneof_body::transferList(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.receipt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.transactionHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transactionHash);
        }
        if let Some(ref v) = self.consensusTimestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transactionID.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.memo);
        }
        if self.transactionFee != 0 {
            my_size += ::protobuf::rt::value_size(6, self.transactionFee, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &TransactionRecord_oneof_body::contractCallResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionRecord_oneof_body::contractCreateResult(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionRecord_oneof_body::transferList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.receipt.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.transactionHash.is_empty() {
            os.write_bytes(2, &self.transactionHash)?;
        }
        if let Some(ref v) = self.consensusTimestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transactionID.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.memo.is_empty() {
            os.write_string(5, &self.memo)?;
        }
        if self.transactionFee != 0 {
            os.write_uint64(6, self.transactionFee)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &TransactionRecord_oneof_body::contractCallResult(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionRecord_oneof_body::contractCreateResult(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionRecord_oneof_body::transferList(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionRecord {
        TransactionRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::TransactionReceipt::TransactionReceipt>>(
                    "receipt",
                    |m: &TransactionRecord| { &m.receipt },
                    |m: &mut TransactionRecord| { &mut m.receipt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transactionHash",
                    |m: &TransactionRecord| { &m.transactionHash },
                    |m: &mut TransactionRecord| { &mut m.transactionHash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Timestamp::Timestamp>>(
                    "consensusTimestamp",
                    |m: &TransactionRecord| { &m.consensusTimestamp },
                    |m: &mut TransactionRecord| { &mut m.consensusTimestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::BasicTypes::TransactionID>>(
                    "transactionID",
                    |m: &TransactionRecord| { &m.transactionID },
                    |m: &mut TransactionRecord| { &mut m.transactionID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "memo",
                    |m: &TransactionRecord| { &m.memo },
                    |m: &mut TransactionRecord| { &mut m.memo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "transactionFee",
                    |m: &TransactionRecord| { &m.transactionFee },
                    |m: &mut TransactionRecord| { &mut m.transactionFee },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::ContractCallLocal::ContractFunctionResult>(
                    "contractCallResult",
                    TransactionRecord::has_contractCallResult,
                    TransactionRecord::get_contractCallResult,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::ContractCallLocal::ContractFunctionResult>(
                    "contractCreateResult",
                    TransactionRecord::has_contractCreateResult,
                    TransactionRecord::get_contractCreateResult,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::CryptoTransfer::TransferList>(
                    "transferList",
                    TransactionRecord::has_transferList,
                    TransactionRecord::get_transferList,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionRecord>(
                    "TransactionRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionRecord {
        static mut instance: ::protobuf::lazy::Lazy<TransactionRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionRecord,
        };
        unsafe {
            instance.get(TransactionRecord::new)
        }
    }
}

impl ::protobuf::Clear for TransactionRecord {
    fn clear(&mut self) {
        self.clear_receipt();
        self.clear_transactionHash();
        self.clear_consensusTimestamp();
        self.clear_transactionID();
        self.clear_memo();
        self.clear_transactionFee();
        self.clear_contractCallResult();
        self.clear_contractCreateResult();
        self.clear_transferList();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17TransactionRecord.proto\x12\x05proto\x1a\x0fTimestamp.proto\x1a\
    \x10BasicTypes.proto\x1a\x18TransactionReceipt.proto\x1a\x14CryptoTransf\
    er.proto\x1a\x17ContractCallLocal.proto\"\x95\x04\n\x11TransactionRecord\
    \x123\n\x07receipt\x18\x01\x20\x01(\x0b2\x19.proto.TransactionReceiptR\
    \x07receipt\x12(\n\x0ftransactionHash\x18\x02\x20\x01(\x0cR\x0ftransacti\
    onHash\x12@\n\x12consensusTimestamp\x18\x03\x20\x01(\x0b2\x10.proto.Time\
    stampR\x12consensusTimestamp\x12:\n\rtransactionID\x18\x04\x20\x01(\x0b2\
    \x14.proto.TransactionIDR\rtransactionID\x12\x12\n\x04memo\x18\x05\x20\
    \x01(\tR\x04memo\x12&\n\x0etransactionFee\x18\x06\x20\x01(\x04R\x0etrans\
    actionFee\x12O\n\x12contractCallResult\x18\x07\x20\x01(\x0b2\x1d.proto.C\
    ontractFunctionResultH\0R\x12contractCallResult\x12S\n\x14contractCreate\
    Result\x18\x08\x20\x01(\x0b2\x1d.proto.ContractFunctionResultH\0R\x14con\
    tractCreateResult\x129\n\x0ctransferList\x18\t\x20\x01(\x0b2\x13.proto.T\
    ransferListH\0R\x0ctransferListB\x06\n\x04bodyB&\n\"com.hederahashgraph.\
    api.proto.javaP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
